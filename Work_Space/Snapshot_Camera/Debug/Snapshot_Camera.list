
Snapshot_Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000170c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080018dc  080018dc  000118dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019b4  080019b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080019b4  080019b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019b4  080019b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019b4  080019b4  000119b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080019bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001a20  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001a20  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040fe  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bec  00000000  00000000  00024192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00024d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00024f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae37  00000000  00000000  00025108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ba1  00000000  00000000  0003ff3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dd7  00000000  00000000  00042ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d38b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da8  00000000  00000000  000d390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080018c4 	.word	0x080018c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080018c4 	.word	0x080018c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <gpiob_switch_init>:
#define GPIOBEN		(1U<<1)


/*Function used for initialing GPIOB pins for external switches*/
void gpiob_switch_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Enable clock access for GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <gpiob_switch_init+0x4c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <gpiob_switch_init+0x4c>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB4, PB5, PB14, and PB15 as inputs*/
	GPIOB->MODER &= ~(3U<<8);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <gpiob_switch_init+0x50>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <gpiob_switch_init+0x50>)
 80002c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<10);
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <gpiob_switch_init+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <gpiob_switch_init+0x50>)
 80002d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<28);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <gpiob_switch_init+0x50>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a08      	ldr	r2, [pc, #32]	; (8000300 <gpiob_switch_init+0x50>)
 80002de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<30);
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <gpiob_switch_init+0x50>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <gpiob_switch_init+0x50>)
 80002ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80002ee:	6013      	str	r3, [r2, #0]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400

08000304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	db0b      	blt.n	800032e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 021f 	and.w	r2, r3, #31
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <__NVIC_EnableIRQ+0x38>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	095b      	lsrs	r3, r3, #5
 8000324:	2001      	movs	r0, #1
 8000326:	fa00 f202 	lsl.w	r2, r0, r2
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100

08000340 <pbpins_exti_init>:
#define GPIOBEN			(1U<<1)
#define SYSCFGEN		(1U<<14)


void pbpins_exti_init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable block access for GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8000348:	4b42      	ldr	r3, [pc, #264]	; (8000454 <pbpins_exti_init+0x114>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a41      	ldr	r2, [pc, #260]	; (8000454 <pbpins_exti_init+0x114>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB4, PB5, PB14, PB15 as input*/
	GPIOB->MODER &= ~(3U<<8);
 8000354:	4b40      	ldr	r3, [pc, #256]	; (8000458 <pbpins_exti_init+0x118>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <pbpins_exti_init+0x118>)
 800035a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800035e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<10);
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <pbpins_exti_init+0x118>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <pbpins_exti_init+0x118>)
 8000366:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800036a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<28);
 800036c:	4b3a      	ldr	r3, [pc, #232]	; (8000458 <pbpins_exti_init+0x118>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a39      	ldr	r2, [pc, #228]	; (8000458 <pbpins_exti_init+0x118>)
 8000372:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<30);
 8000378:	4b37      	ldr	r3, [pc, #220]	; (8000458 <pbpins_exti_init+0x118>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a36      	ldr	r2, [pc, #216]	; (8000458 <pbpins_exti_init+0x118>)
 800037e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000382:	6013      	str	r3, [r2, #0]

	/*Enable clock access to SYSCFG (I need to do more research on what this is)*/
	RCC->APB2ENR |= SYSCFGEN;
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <pbpins_exti_init+0x114>)
 8000386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000388:	4a32      	ldr	r2, [pc, #200]	; (8000454 <pbpins_exti_init+0x114>)
 800038a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTB for EXTI4*/
	SYSCFG->EXTICR[1] |= (1U<<0);
 8000390:	4b32      	ldr	r3, [pc, #200]	; (800045c <pbpins_exti_init+0x11c>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <pbpins_exti_init+0x11c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	60d3      	str	r3, [r2, #12]

	/*Select PORTB for EXTI5*/
	SYSCFG->EXTICR[1] |= (1U<<4);
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <pbpins_exti_init+0x11c>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a2e      	ldr	r2, [pc, #184]	; (800045c <pbpins_exti_init+0x11c>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	60d3      	str	r3, [r2, #12]

	/*Select PORTB for EXTI14*/
	SYSCFG->EXTICR[3] |= (1U<<8);
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <pbpins_exti_init+0x11c>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a2b      	ldr	r2, [pc, #172]	; (800045c <pbpins_exti_init+0x11c>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b2:	6153      	str	r3, [r2, #20]

	/*Select PORTB for EXTI15*/
	SYSCFG->EXTICR[3] |= (1U<<12);
 80003b4:	4b29      	ldr	r3, [pc, #164]	; (800045c <pbpins_exti_init+0x11c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a28      	ldr	r2, [pc, #160]	; (800045c <pbpins_exti_init+0x11c>)
 80003ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003be:	6153      	str	r3, [r2, #20]

	/*Unmask EXTI4*/
	EXTI->IMR |= (1U<<4);
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <pbpins_exti_init+0x120>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <pbpins_exti_init+0x120>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI5*/
	EXTI->IMR |= (1U<<5);
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <pbpins_exti_init+0x120>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a23      	ldr	r2, [pc, #140]	; (8000460 <pbpins_exti_init+0x120>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI14*/
	EXTI->IMR |= (1U<<14);
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <pbpins_exti_init+0x120>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a20      	ldr	r2, [pc, #128]	; (8000460 <pbpins_exti_init+0x120>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI15*/
	EXTI->IMR |= (1U<<15);
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <pbpins_exti_init+0x120>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <pbpins_exti_init+0x120>)
 80003ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003ee:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger for 4, 5, 14, and 15*/
	EXTI->FTSR |= (1U<<4);
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <pbpins_exti_init+0x120>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a1a      	ldr	r2, [pc, #104]	; (8000460 <pbpins_exti_init+0x120>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<5);
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <pbpins_exti_init+0x120>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a17      	ldr	r2, [pc, #92]	; (8000460 <pbpins_exti_init+0x120>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<14);
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <pbpins_exti_init+0x120>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <pbpins_exti_init+0x120>)
 800040e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000412:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<15);
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <pbpins_exti_init+0x120>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a11      	ldr	r2, [pc, #68]	; (8000460 <pbpins_exti_init+0x120>)
 800041a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041e:	60d3      	str	r3, [r2, #12]

	/*Set EXTI4, EXTI5, EXTI14, and EXTI15 priority to 1*/
	NVIC->IP[EXTI4_IRQn] = (1 << 4);
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <pbpins_exti_init+0x124>)
 8000422:	2210      	movs	r2, #16
 8000424:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC->IP[EXTI9_5_IRQn] = (1 << 4);
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <pbpins_exti_init+0x124>)
 800042a:	2210      	movs	r2, #16
 800042c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
	NVIC->IP[EXTI15_10_IRQn] = (1 << 4);
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <pbpins_exti_init+0x124>)
 8000432:	2210      	movs	r2, #16
 8000434:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

	/*Enable EXTI4, EXTI5, EXTI14, and EXTI15 line in NVIC*/
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000438:	200a      	movs	r0, #10
 800043a:	f7ff ff63 	bl	8000304 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800043e:	2017      	movs	r0, #23
 8000440:	f7ff ff60 	bl	8000304 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000444:	2028      	movs	r0, #40	; 0x28
 8000446:	f7ff ff5d 	bl	8000304 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800044a:	b662      	cpsie	i
}
 800044c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40013800 	.word	0x40013800
 8000460:	40013c00 	.word	0x40013c00
 8000464:	e000e100 	.word	0xe000e100

08000468 <main>:
//int td_switch = 0;
//int tu_switch = 0;


int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	gpiob_switch_init();
 800046c:	f7ff ff20 	bl	80002b0 <gpiob_switch_init>
	pbpins_exti_init();
 8000470:	f7ff ff66 	bl	8000340 <pbpins_exti_init>
	tim3_debounce_init();
 8000474:	f000 f9ae 	bl	80007d4 <tim3_debounce_init>
	usart2_tx_init();
 8000478:	f000 f9f4 	bl	8000864 <usart2_tx_init>

	while(1){
 800047c:	e7fe      	b.n	800047c <main+0x14>
	...

08000480 <EXTI4_IRQHandler>:
//Bad use of CPU time
//I want to move on but this is good for learning and writing the best code I can.
//Add above notes to notes file

void EXTI4_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	/*Delay for debouncing*/
	//tim3_ms_delay(20);

	if((EXTI->PR & LINE4) != 0){
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <EXTI4_IRQHandler+0x30>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00d      	beq.n	80004ac <EXTI4_IRQHandler+0x2c>
		/*Clear PR flag*/
		//EXTI->PR |= LINE4;
		EXTI->PR = LINE4;
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <EXTI4_IRQHandler+0x30>)
 8000492:	2210      	movs	r2, #16
 8000494:	615a      	str	r2, [r3, #20]

		/*Disable EXTI4 line*/
		EXTI->IMR &= ~LINE4;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <EXTI4_IRQHandler+0x30>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <EXTI4_IRQHandler+0x30>)
 800049c:	f023 0310 	bic.w	r3, r3, #16
 80004a0:	6013      	str	r3, [r2, #0]

		debounce_source = DEBOUNCE_PL;
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <EXTI4_IRQHandler+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]

		tim3_start();
 80004a8:	f000 f9b8 	bl	800081c <tim3_start>

		/*What I did before*/
		//Do something...
		//printf("Pan Left...\n\r");
	}
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40013c00 	.word	0x40013c00
 80004b4:	20000080 	.word	0x20000080

080004b8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/*Delay for debouncing*/
	//tim3_ms_delay(20);

	if((EXTI->PR & LINE5) != 0){
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <EXTI9_5_IRQHandler+0x38>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0320 	and.w	r3, r3, #32
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d010      	beq.n	80004ea <EXTI9_5_IRQHandler+0x32>
		/*Clear PR flag*/
		EXTI->PR |= LINE5;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <EXTI9_5_IRQHandler+0x38>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <EXTI9_5_IRQHandler+0x38>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6153      	str	r3, [r2, #20]

		/*Disable EXTI5 line*/
		EXTI->IMR &= ~LINE5;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <EXTI9_5_IRQHandler+0x38>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <EXTI9_5_IRQHandler+0x38>)
 80004da:	f023 0320 	bic.w	r3, r3, #32
 80004de:	6013      	str	r3, [r2, #0]

		debounce_source = DEBOUNCE_PR;
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <EXTI9_5_IRQHandler+0x3c>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	701a      	strb	r2, [r3, #0]

		tim3_start();
 80004e6:	f000 f999 	bl	800081c <tim3_start>

		//Do something...
		//printf("Pan Right...\n\r");
	}
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40013c00 	.word	0x40013c00
 80004f4:	20000080 	.word	0x20000080

080004f8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/*Delay for debouncing*/
	//tim3_ms_delay(20);

	if((EXTI->PR & LINE14) != 0){
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000504:	2b00      	cmp	r3, #0
 8000506:	d010      	beq.n	800052a <EXTI15_10_IRQHandler+0x32>
		/*Clear PR flag*/
		EXTI->PR |= LINE14;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 800050e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000512:	6153      	str	r3, [r2, #20]

		/*Disable EXTI14 line*/
		EXTI->IMR &= ~LINE14;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 800051a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800051e:	6013      	str	r3, [r2, #0]

		debounce_source = DEBOUNCE_TD;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <EXTI15_10_IRQHandler+0x68>)
 8000522:	2203      	movs	r2, #3
 8000524:	701a      	strb	r2, [r3, #0]

		tim3_start();
 8000526:	f000 f979 	bl	800081c <tim3_start>

		//Do something...
		//printf("Tilt Down...\n\r");
	}

	if((EXTI->PR & LINE15) != 0){
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000532:	2b00      	cmp	r3, #0
 8000534:	d010      	beq.n	8000558 <EXTI15_10_IRQHandler+0x60>
		/*Clear PR flag*/
		EXTI->PR |= LINE15;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000540:	6153      	str	r3, [r2, #20]

		/*Disable EXTI15 line*/
		EXTI->IMR &= ~LINE15;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <EXTI15_10_IRQHandler+0x64>)
 8000548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800054c:	6013      	str	r3, [r2, #0]

		debounce_source = DEBOUNCE_TU;
 800054e:	4b04      	ldr	r3, [pc, #16]	; (8000560 <EXTI15_10_IRQHandler+0x68>)
 8000550:	2204      	movs	r2, #4
 8000552:	701a      	strb	r2, [r3, #0]

		tim3_start();
 8000554:	f000 f962 	bl	800081c <tim3_start>

		//Do something...
		//printf("Tilt Up...\n\r");
	}
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40013c00 	.word	0x40013c00
 8000560:	20000080 	.word	0x20000080

08000564 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(TIM3->SR & SR_UIF){
 8000568:	4b31      	ldr	r3, [pc, #196]	; (8000630 <TIM3_IRQHandler+0xcc>)
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d057      	beq.n	8000624 <TIM3_IRQHandler+0xc0>
		TIM3->SR &= ~SR_UIF;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <TIM3_IRQHandler+0xcc>)
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	4a2d      	ldr	r2, [pc, #180]	; (8000630 <TIM3_IRQHandler+0xcc>)
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6113      	str	r3, [r2, #16]

		switch(debounce_source){
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <TIM3_IRQHandler+0xd0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	3b01      	subs	r3, #1
 8000588:	2b03      	cmp	r3, #3
 800058a:	d84d      	bhi.n	8000628 <TIM3_IRQHandler+0xc4>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <TIM3_IRQHandler+0x30>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005a5 	.word	0x080005a5
 8000598:	080005c5 	.word	0x080005c5
 800059c:	080005e5 	.word	0x080005e5
 80005a0:	08000605 	.word	0x08000605

			case DEBOUNCE_PL:
				if(!(GPIOB->IDR & PB4_PIN)){
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <TIM3_IRQHandler+0xd4>)
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	f003 0310 	and.w	r3, r3, #16
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <TIM3_IRQHandler+0x52>
					printf("Pan Left...\n\r");
 80005b0:	4822      	ldr	r0, [pc, #136]	; (800063c <TIM3_IRQHandler+0xd8>)
 80005b2:	f000 fa31 	bl	8000a18 <iprintf>
				}
				EXTI->IMR |= LINE4;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	6013      	str	r3, [r2, #0]
				break;
 80005c2:	e032      	b.n	800062a <TIM3_IRQHandler+0xc6>

			case DEBOUNCE_PR:
				if(!(GPIOB->IDR & PB5_PIN)){
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <TIM3_IRQHandler+0xd4>)
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <TIM3_IRQHandler+0x72>
					printf("Pan Right...\n\r");
 80005d0:	481c      	ldr	r0, [pc, #112]	; (8000644 <TIM3_IRQHandler+0xe0>)
 80005d2:	f000 fa21 	bl	8000a18 <iprintf>
				}
				EXTI->IMR |= LINE5;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005dc:	f043 0320 	orr.w	r3, r3, #32
 80005e0:	6013      	str	r3, [r2, #0]
				break;
 80005e2:	e022      	b.n	800062a <TIM3_IRQHandler+0xc6>

			case DEBOUNCE_TD:
				if(!(GPIOB->IDR & PB14_PIN)){
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <TIM3_IRQHandler+0xd4>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <TIM3_IRQHandler+0x92>
					printf("Tilt Down...\n\r");
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <TIM3_IRQHandler+0xe4>)
 80005f2:	f000 fa11 	bl	8000a18 <iprintf>
				}
				EXTI->IMR |= LINE14;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <TIM3_IRQHandler+0xdc>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6013      	str	r3, [r2, #0]
				break;
 8000602:	e012      	b.n	800062a <TIM3_IRQHandler+0xc6>

			case DEBOUNCE_TU:
				if(!(GPIOB->IDR & PB15_PIN)){
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <TIM3_IRQHandler+0xd4>)
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <TIM3_IRQHandler+0xb2>
					printf("Tilt Up...\n\r");
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <TIM3_IRQHandler+0xe8>)
 8000612:	f000 fa01 	bl	8000a18 <iprintf>
				}
				EXTI->IMR |= LINE15;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <TIM3_IRQHandler+0xdc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <TIM3_IRQHandler+0xdc>)
 800061c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000620:	6013      	str	r3, [r2, #0]
				break;
 8000622:	e002      	b.n	800062a <TIM3_IRQHandler+0xc6>

			default:
				break;

		}
	}
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <TIM3_IRQHandler+0xc6>
				break;
 8000628:	bf00      	nop
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40000400 	.word	0x40000400
 8000634:	20000080 	.word	0x20000080
 8000638:	40020400 	.word	0x40020400
 800063c:	080018dc 	.word	0x080018dc
 8000640:	40013c00 	.word	0x40013c00
 8000644:	080018ec 	.word	0x080018ec
 8000648:	080018fc 	.word	0x080018fc
 800064c:	0800190c 	.word	0x0800190c

08000650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e00a      	b.n	8000678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000662:	f3af 8000 	nop.w
 8000666:	4601      	mov	r1, r0
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf0      	blt.n	8000662 <_read+0x12>
	}

return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e009      	b.n	80006b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8d1 	bl	800084c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf1      	blt.n	800069c <_write+0x12>
	}
	return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_close>:

int _close(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ea:	605a      	str	r2, [r3, #4]
	return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_isatty>:

int _isatty(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	return 1;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f000 f92a 	bl	80009b4 <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20020000 	.word	0x20020000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000084 	.word	0x20000084
 8000794:	200000a0 	.word	0x200000a0

08000798 <__NVIC_EnableIRQ>:
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4907      	ldr	r1, [pc, #28]	; (80007d0 <__NVIC_EnableIRQ+0x38>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100

080007d4 <tim3_debounce_init>:
}


//Initialization function for timer3 in one shot mode (20ms) with interrupts
void tim3_debounce_init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/*Enable clock access to timer3*/
	RCC->APB1ENR |= TIM3EN;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <tim3_debounce_init+0x40>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <tim3_debounce_init+0x40>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set timer3 for One-pulse mode*/
	TIM3->CR1 |= CR1_OPM;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <tim3_debounce_init+0x44>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <tim3_debounce_init+0x44>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6013      	str	r3, [r2, #0]

	/*Set prescaler value and auto-reload value for 20ms*/
	TIM3->PSC = 1600 - 1; // 16 000 000 / 1 600 = 10 000
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <tim3_debounce_init+0x44>)
 80007f2:	f240 623f 	movw	r2, #1599	; 0x63f
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 200 - 1; // 200 / 10 000 = 0.02
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <tim3_debounce_init+0x44>)
 80007fa:	22c7      	movs	r2, #199	; 0xc7
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable update interrupt*/
	TIM3->DIER |= DIER_UIE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <tim3_debounce_init+0x44>)
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <tim3_debounce_init+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	60d3      	str	r3, [r2, #12]

	/*Enable TIM3 interrupt in NVIC*/
	NVIC_EnableIRQ(TIM3_IRQn);
 800080a:	201d      	movs	r0, #29
 800080c:	f7ff ffc4 	bl	8000798 <__NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40000400 	.word	0x40000400

0800081c <tim3_start>:

//Function to start timer3
void tim3_start(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	/*Clear counter*/
	TIM3->CNT = 0;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <tim3_start+0x2c>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear UIF*/
	TIM3->SR &= ~SR_UIF;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <tim3_start+0x2c>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <tim3_start+0x2c>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	6113      	str	r3, [r2, #16]

	/*Enable Timer3*/
	TIM3->CR1 |= CR1_CEN;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <tim3_start+0x2c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <tim3_start+0x2c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6013      	str	r3, [r2, #0]

}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40000400 	.word	0x40000400

0800084c <__io_putchar>:


//void uart2_write(int ch);

int __io_putchar(int ch)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f845 	bl	80008e4 <uart2_write>
	return ch;
 800085a:	687b      	ldr	r3, [r7, #4]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <usart2_tx_init>:

void usart2_tx_init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/*******Configure uart GPIO pin*******/
	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <usart2_tx_init+0x70>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <usart2_tx_init+0x70>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <usart2_tx_init+0x74>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <usart2_tx_init+0x74>)
 800087a:	f023 0310 	bic.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <usart2_tx_init+0x74>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <usart2_tx_init+0x74>)
 8000886:	f043 0320 	orr.w	r3, r3, #32
 800088a:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[0] &= ~(0xF<<8);
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <usart2_tx_init+0x74>)
 800088e:	6a1b      	ldr	r3, [r3, #32]
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <usart2_tx_init+0x74>)
 8000892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000896:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7U<<8);
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <usart2_tx_init+0x74>)
 800089a:	6a1b      	ldr	r3, [r3, #32]
 800089c:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <usart2_tx_init+0x74>)
 800089e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80008a2:	6213      	str	r3, [r2, #32]

	/*******Configure uart module*******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= USART2EN;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <usart2_tx_init+0x70>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <usart2_tx_init+0x70>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	4909      	ldr	r1, [pc, #36]	; (80008dc <usart2_tx_init+0x78>)
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <usart2_tx_init+0x7c>)
 80008b8:	f000 f82c 	bl	8000914 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE; //Set to CR1_TE on purpose. Basically Setting everything else to zero
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <usart2_tx_init+0x7c>)
 80008be:	2208      	movs	r2, #8
 80008c0:	60da      	str	r2, [r3, #12]
						  //is good for standard UART configuration.

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;//Now just add 1 to UE bit otherwise mess with previous settings
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <usart2_tx_init+0x7c>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <usart2_tx_init+0x7c>)
 80008c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008cc:	60d3      	str	r3, [r2, #12]

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	00f42400 	.word	0x00f42400
 80008e0:	40004400 	.word	0x40004400

080008e4 <uart2_write>:
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty. While its not empty stay in while*/
	/*The data register still has data in it that it needs to send*/
	while(!(USART2->SR & SR_TXE)){}
 80008ec:	bf00      	nop
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <uart2_write+0x2c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <uart2_write+0x2c>)
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	6053      	str	r3, [r2, #4]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400

08000914 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	68b8      	ldr	r0, [r7, #8]
 8000924:	f000 f808 	bl	8000938 <compute_uart_bd>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	609a      	str	r2, [r3, #8]
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	085a      	lsrs	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	441a      	add	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000950:	b29b      	uxth	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000964:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098e:	f000 f817 	bl	80009c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fd69 	bl	8000468 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009a4:	080019bc 	.word	0x080019bc
  ldr r2, =_sbss
 80009a8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009ac:	200000a0 	.word	0x200000a0

080009b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <__errno>:
 80009b4:	4b01      	ldr	r3, [pc, #4]	; (80009bc <__errno+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000

080009c0 <__libc_init_array>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4d0d      	ldr	r5, [pc, #52]	; (80009f8 <__libc_init_array+0x38>)
 80009c4:	4c0d      	ldr	r4, [pc, #52]	; (80009fc <__libc_init_array+0x3c>)
 80009c6:	1b64      	subs	r4, r4, r5
 80009c8:	10a4      	asrs	r4, r4, #2
 80009ca:	2600      	movs	r6, #0
 80009cc:	42a6      	cmp	r6, r4
 80009ce:	d109      	bne.n	80009e4 <__libc_init_array+0x24>
 80009d0:	4d0b      	ldr	r5, [pc, #44]	; (8000a00 <__libc_init_array+0x40>)
 80009d2:	4c0c      	ldr	r4, [pc, #48]	; (8000a04 <__libc_init_array+0x44>)
 80009d4:	f000 ff76 	bl	80018c4 <_init>
 80009d8:	1b64      	subs	r4, r4, r5
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	2600      	movs	r6, #0
 80009de:	42a6      	cmp	r6, r4
 80009e0:	d105      	bne.n	80009ee <__libc_init_array+0x2e>
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e8:	4798      	blx	r3
 80009ea:	3601      	adds	r6, #1
 80009ec:	e7ee      	b.n	80009cc <__libc_init_array+0xc>
 80009ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f2:	4798      	blx	r3
 80009f4:	3601      	adds	r6, #1
 80009f6:	e7f2      	b.n	80009de <__libc_init_array+0x1e>
 80009f8:	080019b4 	.word	0x080019b4
 80009fc:	080019b4 	.word	0x080019b4
 8000a00:	080019b4 	.word	0x080019b4
 8000a04:	080019b8 	.word	0x080019b8

08000a08 <memset>:
 8000a08:	4402      	add	r2, r0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d100      	bne.n	8000a12 <memset+0xa>
 8000a10:	4770      	bx	lr
 8000a12:	f803 1b01 	strb.w	r1, [r3], #1
 8000a16:	e7f9      	b.n	8000a0c <memset+0x4>

08000a18 <iprintf>:
 8000a18:	b40f      	push	{r0, r1, r2, r3}
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <iprintf+0x2c>)
 8000a1c:	b513      	push	{r0, r1, r4, lr}
 8000a1e:	681c      	ldr	r4, [r3, #0]
 8000a20:	b124      	cbz	r4, 8000a2c <iprintf+0x14>
 8000a22:	69a3      	ldr	r3, [r4, #24]
 8000a24:	b913      	cbnz	r3, 8000a2c <iprintf+0x14>
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 f866 	bl	8000af8 <__sinit>
 8000a2c:	ab05      	add	r3, sp, #20
 8000a2e:	9a04      	ldr	r2, [sp, #16]
 8000a30:	68a1      	ldr	r1, [r4, #8]
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	4620      	mov	r0, r4
 8000a36:	f000 f983 	bl	8000d40 <_vfiprintf_r>
 8000a3a:	b002      	add	sp, #8
 8000a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr
 8000a44:	20000000 	.word	0x20000000

08000a48 <std>:
 8000a48:	2300      	movs	r3, #0
 8000a4a:	b510      	push	{r4, lr}
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a56:	6083      	str	r3, [r0, #8]
 8000a58:	8181      	strh	r1, [r0, #12]
 8000a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8000a5c:	81c2      	strh	r2, [r0, #14]
 8000a5e:	6183      	str	r3, [r0, #24]
 8000a60:	4619      	mov	r1, r3
 8000a62:	2208      	movs	r2, #8
 8000a64:	305c      	adds	r0, #92	; 0x5c
 8000a66:	f7ff ffcf 	bl	8000a08 <memset>
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <std+0x38>)
 8000a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <std+0x3c>)
 8000a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <std+0x40>)
 8000a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <std+0x44>)
 8000a78:	6224      	str	r4, [r4, #32]
 8000a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	bf00      	nop
 8000a80:	080012e9 	.word	0x080012e9
 8000a84:	0800130b 	.word	0x0800130b
 8000a88:	08001343 	.word	0x08001343
 8000a8c:	08001367 	.word	0x08001367

08000a90 <_cleanup_r>:
 8000a90:	4901      	ldr	r1, [pc, #4]	; (8000a98 <_cleanup_r+0x8>)
 8000a92:	f000 b8af 	b.w	8000bf4 <_fwalk_reent>
 8000a96:	bf00      	nop
 8000a98:	08001641 	.word	0x08001641

08000a9c <__sfmoreglue>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	1e4a      	subs	r2, r1, #1
 8000aa0:	2568      	movs	r5, #104	; 0x68
 8000aa2:	4355      	muls	r5, r2
 8000aa4:	460e      	mov	r6, r1
 8000aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000aaa:	f000 f8c5 	bl	8000c38 <_malloc_r>
 8000aae:	4604      	mov	r4, r0
 8000ab0:	b140      	cbz	r0, 8000ac4 <__sfmoreglue+0x28>
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ab8:	300c      	adds	r0, #12
 8000aba:	60a0      	str	r0, [r4, #8]
 8000abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ac0:	f7ff ffa2 	bl	8000a08 <memset>
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}

08000ac8 <__sfp_lock_acquire>:
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <__sfp_lock_acquire+0x8>)
 8000aca:	f000 b8b3 	b.w	8000c34 <__retarget_lock_acquire_recursive>
 8000ace:	bf00      	nop
 8000ad0:	20000098 	.word	0x20000098

08000ad4 <__sfp_lock_release>:
 8000ad4:	4801      	ldr	r0, [pc, #4]	; (8000adc <__sfp_lock_release+0x8>)
 8000ad6:	f000 b8ae 	b.w	8000c36 <__retarget_lock_release_recursive>
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <__sinit_lock_acquire>:
 8000ae0:	4801      	ldr	r0, [pc, #4]	; (8000ae8 <__sinit_lock_acquire+0x8>)
 8000ae2:	f000 b8a7 	b.w	8000c34 <__retarget_lock_acquire_recursive>
 8000ae6:	bf00      	nop
 8000ae8:	20000093 	.word	0x20000093

08000aec <__sinit_lock_release>:
 8000aec:	4801      	ldr	r0, [pc, #4]	; (8000af4 <__sinit_lock_release+0x8>)
 8000aee:	f000 b8a2 	b.w	8000c36 <__retarget_lock_release_recursive>
 8000af2:	bf00      	nop
 8000af4:	20000093 	.word	0x20000093

08000af8 <__sinit>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4604      	mov	r4, r0
 8000afc:	f7ff fff0 	bl	8000ae0 <__sinit_lock_acquire>
 8000b00:	69a3      	ldr	r3, [r4, #24]
 8000b02:	b11b      	cbz	r3, 8000b0c <__sinit+0x14>
 8000b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b08:	f7ff bff0 	b.w	8000aec <__sinit_lock_release>
 8000b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b10:	6523      	str	r3, [r4, #80]	; 0x50
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <__sinit+0x68>)
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <__sinit+0x6c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	bf04      	itt	eq
 8000b1e:	2301      	moveq	r3, #1
 8000b20:	61a3      	streq	r3, [r4, #24]
 8000b22:	4620      	mov	r0, r4
 8000b24:	f000 f820 	bl	8000b68 <__sfp>
 8000b28:	6060      	str	r0, [r4, #4]
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f000 f81c 	bl	8000b68 <__sfp>
 8000b30:	60a0      	str	r0, [r4, #8]
 8000b32:	4620      	mov	r0, r4
 8000b34:	f000 f818 	bl	8000b68 <__sfp>
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60e0      	str	r0, [r4, #12]
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	6860      	ldr	r0, [r4, #4]
 8000b40:	f7ff ff82 	bl	8000a48 <std>
 8000b44:	68a0      	ldr	r0, [r4, #8]
 8000b46:	2201      	movs	r2, #1
 8000b48:	2109      	movs	r1, #9
 8000b4a:	f7ff ff7d 	bl	8000a48 <std>
 8000b4e:	68e0      	ldr	r0, [r4, #12]
 8000b50:	2202      	movs	r2, #2
 8000b52:	2112      	movs	r1, #18
 8000b54:	f7ff ff78 	bl	8000a48 <std>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61a3      	str	r3, [r4, #24]
 8000b5c:	e7d2      	b.n	8000b04 <__sinit+0xc>
 8000b5e:	bf00      	nop
 8000b60:	0800191c 	.word	0x0800191c
 8000b64:	08000a91 	.word	0x08000a91

08000b68 <__sfp>:
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6a:	4607      	mov	r7, r0
 8000b6c:	f7ff ffac 	bl	8000ac8 <__sfp_lock_acquire>
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <__sfp+0x84>)
 8000b72:	681e      	ldr	r6, [r3, #0]
 8000b74:	69b3      	ldr	r3, [r6, #24]
 8000b76:	b913      	cbnz	r3, 8000b7e <__sfp+0x16>
 8000b78:	4630      	mov	r0, r6
 8000b7a:	f7ff ffbd 	bl	8000af8 <__sinit>
 8000b7e:	3648      	adds	r6, #72	; 0x48
 8000b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	d503      	bpl.n	8000b90 <__sfp+0x28>
 8000b88:	6833      	ldr	r3, [r6, #0]
 8000b8a:	b30b      	cbz	r3, 8000bd0 <__sfp+0x68>
 8000b8c:	6836      	ldr	r6, [r6, #0]
 8000b8e:	e7f7      	b.n	8000b80 <__sfp+0x18>
 8000b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b94:	b9d5      	cbnz	r5, 8000bcc <__sfp+0x64>
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <__sfp+0x88>)
 8000b98:	60e3      	str	r3, [r4, #12]
 8000b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8000ba0:	f000 f847 	bl	8000c32 <__retarget_lock_init_recursive>
 8000ba4:	f7ff ff96 	bl	8000ad4 <__sfp_lock_release>
 8000ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000bb0:	6025      	str	r5, [r4, #0]
 8000bb2:	61a5      	str	r5, [r4, #24]
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	4629      	mov	r1, r5
 8000bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bbc:	f7ff ff24 	bl	8000a08 <memset>
 8000bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bc8:	4620      	mov	r0, r4
 8000bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bcc:	3468      	adds	r4, #104	; 0x68
 8000bce:	e7d9      	b.n	8000b84 <__sfp+0x1c>
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	f7ff ff62 	bl	8000a9c <__sfmoreglue>
 8000bd8:	4604      	mov	r4, r0
 8000bda:	6030      	str	r0, [r6, #0]
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	d1d5      	bne.n	8000b8c <__sfp+0x24>
 8000be0:	f7ff ff78 	bl	8000ad4 <__sfp_lock_release>
 8000be4:	230c      	movs	r3, #12
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	e7ee      	b.n	8000bc8 <__sfp+0x60>
 8000bea:	bf00      	nop
 8000bec:	0800191c 	.word	0x0800191c
 8000bf0:	ffff0001 	.word	0xffff0001

08000bf4 <_fwalk_reent>:
 8000bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4688      	mov	r8, r1
 8000bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c00:	2700      	movs	r7, #0
 8000c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c06:	f1b9 0901 	subs.w	r9, r9, #1
 8000c0a:	d505      	bpl.n	8000c18 <_fwalk_reent+0x24>
 8000c0c:	6824      	ldr	r4, [r4, #0]
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d1f7      	bne.n	8000c02 <_fwalk_reent+0xe>
 8000c12:	4638      	mov	r0, r7
 8000c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c18:	89ab      	ldrh	r3, [r5, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d907      	bls.n	8000c2e <_fwalk_reent+0x3a>
 8000c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c22:	3301      	adds	r3, #1
 8000c24:	d003      	beq.n	8000c2e <_fwalk_reent+0x3a>
 8000c26:	4629      	mov	r1, r5
 8000c28:	4630      	mov	r0, r6
 8000c2a:	47c0      	blx	r8
 8000c2c:	4307      	orrs	r7, r0
 8000c2e:	3568      	adds	r5, #104	; 0x68
 8000c30:	e7e9      	b.n	8000c06 <_fwalk_reent+0x12>

08000c32 <__retarget_lock_init_recursive>:
 8000c32:	4770      	bx	lr

08000c34 <__retarget_lock_acquire_recursive>:
 8000c34:	4770      	bx	lr

08000c36 <__retarget_lock_release_recursive>:
 8000c36:	4770      	bx	lr

08000c38 <_malloc_r>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	1ccd      	adds	r5, r1, #3
 8000c3c:	f025 0503 	bic.w	r5, r5, #3
 8000c40:	3508      	adds	r5, #8
 8000c42:	2d0c      	cmp	r5, #12
 8000c44:	bf38      	it	cc
 8000c46:	250c      	movcc	r5, #12
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	db01      	blt.n	8000c52 <_malloc_r+0x1a>
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	d903      	bls.n	8000c5a <_malloc_r+0x22>
 8000c52:	230c      	movs	r3, #12
 8000c54:	6033      	str	r3, [r6, #0]
 8000c56:	2000      	movs	r0, #0
 8000c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5a:	f000 fda3 	bl	80017a4 <__malloc_lock>
 8000c5e:	4921      	ldr	r1, [pc, #132]	; (8000ce4 <_malloc_r+0xac>)
 8000c60:	680a      	ldr	r2, [r1, #0]
 8000c62:	4614      	mov	r4, r2
 8000c64:	b99c      	cbnz	r4, 8000c8e <_malloc_r+0x56>
 8000c66:	4f20      	ldr	r7, [pc, #128]	; (8000ce8 <_malloc_r+0xb0>)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b923      	cbnz	r3, 8000c76 <_malloc_r+0x3e>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f000 fb2a 	bl	80012c8 <_sbrk_r>
 8000c74:	6038      	str	r0, [r7, #0]
 8000c76:	4629      	mov	r1, r5
 8000c78:	4630      	mov	r0, r6
 8000c7a:	f000 fb25 	bl	80012c8 <_sbrk_r>
 8000c7e:	1c43      	adds	r3, r0, #1
 8000c80:	d123      	bne.n	8000cca <_malloc_r+0x92>
 8000c82:	230c      	movs	r3, #12
 8000c84:	6033      	str	r3, [r6, #0]
 8000c86:	4630      	mov	r0, r6
 8000c88:	f000 fd92 	bl	80017b0 <__malloc_unlock>
 8000c8c:	e7e3      	b.n	8000c56 <_malloc_r+0x1e>
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	1b5b      	subs	r3, r3, r5
 8000c92:	d417      	bmi.n	8000cc4 <_malloc_r+0x8c>
 8000c94:	2b0b      	cmp	r3, #11
 8000c96:	d903      	bls.n	8000ca0 <_malloc_r+0x68>
 8000c98:	6023      	str	r3, [r4, #0]
 8000c9a:	441c      	add	r4, r3
 8000c9c:	6025      	str	r5, [r4, #0]
 8000c9e:	e004      	b.n	8000caa <_malloc_r+0x72>
 8000ca0:	6863      	ldr	r3, [r4, #4]
 8000ca2:	42a2      	cmp	r2, r4
 8000ca4:	bf0c      	ite	eq
 8000ca6:	600b      	streq	r3, [r1, #0]
 8000ca8:	6053      	strne	r3, [r2, #4]
 8000caa:	4630      	mov	r0, r6
 8000cac:	f000 fd80 	bl	80017b0 <__malloc_unlock>
 8000cb0:	f104 000b 	add.w	r0, r4, #11
 8000cb4:	1d23      	adds	r3, r4, #4
 8000cb6:	f020 0007 	bic.w	r0, r0, #7
 8000cba:	1ac2      	subs	r2, r0, r3
 8000cbc:	d0cc      	beq.n	8000c58 <_malloc_r+0x20>
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	50a3      	str	r3, [r4, r2]
 8000cc2:	e7c9      	b.n	8000c58 <_malloc_r+0x20>
 8000cc4:	4622      	mov	r2, r4
 8000cc6:	6864      	ldr	r4, [r4, #4]
 8000cc8:	e7cc      	b.n	8000c64 <_malloc_r+0x2c>
 8000cca:	1cc4      	adds	r4, r0, #3
 8000ccc:	f024 0403 	bic.w	r4, r4, #3
 8000cd0:	42a0      	cmp	r0, r4
 8000cd2:	d0e3      	beq.n	8000c9c <_malloc_r+0x64>
 8000cd4:	1a21      	subs	r1, r4, r0
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	f000 faf6 	bl	80012c8 <_sbrk_r>
 8000cdc:	3001      	adds	r0, #1
 8000cde:	d1dd      	bne.n	8000c9c <_malloc_r+0x64>
 8000ce0:	e7cf      	b.n	8000c82 <_malloc_r+0x4a>
 8000ce2:	bf00      	nop
 8000ce4:	20000088 	.word	0x20000088
 8000ce8:	2000008c 	.word	0x2000008c

08000cec <__sfputc_r>:
 8000cec:	6893      	ldr	r3, [r2, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	b410      	push	{r4}
 8000cf4:	6093      	str	r3, [r2, #8]
 8000cf6:	da08      	bge.n	8000d0a <__sfputc_r+0x1e>
 8000cf8:	6994      	ldr	r4, [r2, #24]
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	db01      	blt.n	8000d02 <__sfputc_r+0x16>
 8000cfe:	290a      	cmp	r1, #10
 8000d00:	d103      	bne.n	8000d0a <__sfputc_r+0x1e>
 8000d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d06:	f000 bb33 	b.w	8001370 <__swbuf_r>
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	1c58      	adds	r0, r3, #1
 8000d0e:	6010      	str	r0, [r2, #0]
 8000d10:	7019      	strb	r1, [r3, #0]
 8000d12:	4608      	mov	r0, r1
 8000d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <__sfputs_r>:
 8000d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	460f      	mov	r7, r1
 8000d20:	4614      	mov	r4, r2
 8000d22:	18d5      	adds	r5, r2, r3
 8000d24:	42ac      	cmp	r4, r5
 8000d26:	d101      	bne.n	8000d2c <__sfputs_r+0x12>
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e007      	b.n	8000d3c <__sfputs_r+0x22>
 8000d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d30:	463a      	mov	r2, r7
 8000d32:	4630      	mov	r0, r6
 8000d34:	f7ff ffda 	bl	8000cec <__sfputc_r>
 8000d38:	1c43      	adds	r3, r0, #1
 8000d3a:	d1f3      	bne.n	8000d24 <__sfputs_r+0xa>
 8000d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d40 <_vfiprintf_r>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	460d      	mov	r5, r1
 8000d46:	b09d      	sub	sp, #116	; 0x74
 8000d48:	4614      	mov	r4, r2
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	4606      	mov	r6, r0
 8000d4e:	b118      	cbz	r0, 8000d58 <_vfiprintf_r+0x18>
 8000d50:	6983      	ldr	r3, [r0, #24]
 8000d52:	b90b      	cbnz	r3, 8000d58 <_vfiprintf_r+0x18>
 8000d54:	f7ff fed0 	bl	8000af8 <__sinit>
 8000d58:	4b89      	ldr	r3, [pc, #548]	; (8000f80 <_vfiprintf_r+0x240>)
 8000d5a:	429d      	cmp	r5, r3
 8000d5c:	d11b      	bne.n	8000d96 <_vfiprintf_r+0x56>
 8000d5e:	6875      	ldr	r5, [r6, #4]
 8000d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d62:	07d9      	lsls	r1, r3, #31
 8000d64:	d405      	bmi.n	8000d72 <_vfiprintf_r+0x32>
 8000d66:	89ab      	ldrh	r3, [r5, #12]
 8000d68:	059a      	lsls	r2, r3, #22
 8000d6a:	d402      	bmi.n	8000d72 <_vfiprintf_r+0x32>
 8000d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d6e:	f7ff ff61 	bl	8000c34 <__retarget_lock_acquire_recursive>
 8000d72:	89ab      	ldrh	r3, [r5, #12]
 8000d74:	071b      	lsls	r3, r3, #28
 8000d76:	d501      	bpl.n	8000d7c <_vfiprintf_r+0x3c>
 8000d78:	692b      	ldr	r3, [r5, #16]
 8000d7a:	b9eb      	cbnz	r3, 8000db8 <_vfiprintf_r+0x78>
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f000 fb5a 	bl	8001438 <__swsetup_r>
 8000d84:	b1c0      	cbz	r0, 8000db8 <_vfiprintf_r+0x78>
 8000d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d88:	07dc      	lsls	r4, r3, #31
 8000d8a:	d50e      	bpl.n	8000daa <_vfiprintf_r+0x6a>
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	b01d      	add	sp, #116	; 0x74
 8000d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d96:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <_vfiprintf_r+0x244>)
 8000d98:	429d      	cmp	r5, r3
 8000d9a:	d101      	bne.n	8000da0 <_vfiprintf_r+0x60>
 8000d9c:	68b5      	ldr	r5, [r6, #8]
 8000d9e:	e7df      	b.n	8000d60 <_vfiprintf_r+0x20>
 8000da0:	4b79      	ldr	r3, [pc, #484]	; (8000f88 <_vfiprintf_r+0x248>)
 8000da2:	429d      	cmp	r5, r3
 8000da4:	bf08      	it	eq
 8000da6:	68f5      	ldreq	r5, [r6, #12]
 8000da8:	e7da      	b.n	8000d60 <_vfiprintf_r+0x20>
 8000daa:	89ab      	ldrh	r3, [r5, #12]
 8000dac:	0598      	lsls	r0, r3, #22
 8000dae:	d4ed      	bmi.n	8000d8c <_vfiprintf_r+0x4c>
 8000db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db2:	f7ff ff40 	bl	8000c36 <__retarget_lock_release_recursive>
 8000db6:	e7e9      	b.n	8000d8c <_vfiprintf_r+0x4c>
 8000db8:	2300      	movs	r3, #0
 8000dba:	9309      	str	r3, [sp, #36]	; 0x24
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000dc6:	2330      	movs	r3, #48	; 0x30
 8000dc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000f8c <_vfiprintf_r+0x24c>
 8000dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000dd0:	f04f 0901 	mov.w	r9, #1
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ddc:	b10a      	cbz	r2, 8000de2 <_vfiprintf_r+0xa2>
 8000dde:	2a25      	cmp	r2, #37	; 0x25
 8000de0:	d1f9      	bne.n	8000dd6 <_vfiprintf_r+0x96>
 8000de2:	ebba 0b04 	subs.w	fp, sl, r4
 8000de6:	d00b      	beq.n	8000e00 <_vfiprintf_r+0xc0>
 8000de8:	465b      	mov	r3, fp
 8000dea:	4622      	mov	r2, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff ff93 	bl	8000d1a <__sfputs_r>
 8000df4:	3001      	adds	r0, #1
 8000df6:	f000 80aa 	beq.w	8000f4e <_vfiprintf_r+0x20e>
 8000dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000dfc:	445a      	add	r2, fp
 8000dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8000e00:	f89a 3000 	ldrb.w	r3, [sl]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a2 	beq.w	8000f4e <_vfiprintf_r+0x20e>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e14:	f10a 0a01 	add.w	sl, sl, #1
 8000e18:	9304      	str	r3, [sp, #16]
 8000e1a:	9307      	str	r3, [sp, #28]
 8000e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e20:	931a      	str	r3, [sp, #104]	; 0x68
 8000e22:	4654      	mov	r4, sl
 8000e24:	2205      	movs	r2, #5
 8000e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2a:	4858      	ldr	r0, [pc, #352]	; (8000f8c <_vfiprintf_r+0x24c>)
 8000e2c:	f7ff f9f0 	bl	8000210 <memchr>
 8000e30:	9a04      	ldr	r2, [sp, #16]
 8000e32:	b9d8      	cbnz	r0, 8000e6c <_vfiprintf_r+0x12c>
 8000e34:	06d1      	lsls	r1, r2, #27
 8000e36:	bf44      	itt	mi
 8000e38:	2320      	movmi	r3, #32
 8000e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e3e:	0713      	lsls	r3, r2, #28
 8000e40:	bf44      	itt	mi
 8000e42:	232b      	movmi	r3, #43	; 0x2b
 8000e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e48:	f89a 3000 	ldrb.w	r3, [sl]
 8000e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e4e:	d015      	beq.n	8000e7c <_vfiprintf_r+0x13c>
 8000e50:	9a07      	ldr	r2, [sp, #28]
 8000e52:	4654      	mov	r4, sl
 8000e54:	2000      	movs	r0, #0
 8000e56:	f04f 0c0a 	mov.w	ip, #10
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e60:	3b30      	subs	r3, #48	; 0x30
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	d94e      	bls.n	8000f04 <_vfiprintf_r+0x1c4>
 8000e66:	b1b0      	cbz	r0, 8000e96 <_vfiprintf_r+0x156>
 8000e68:	9207      	str	r2, [sp, #28]
 8000e6a:	e014      	b.n	8000e96 <_vfiprintf_r+0x156>
 8000e6c:	eba0 0308 	sub.w	r3, r0, r8
 8000e70:	fa09 f303 	lsl.w	r3, r9, r3
 8000e74:	4313      	orrs	r3, r2
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	46a2      	mov	sl, r4
 8000e7a:	e7d2      	b.n	8000e22 <_vfiprintf_r+0xe2>
 8000e7c:	9b03      	ldr	r3, [sp, #12]
 8000e7e:	1d19      	adds	r1, r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	9103      	str	r1, [sp, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfbb      	ittet	lt
 8000e88:	425b      	neglt	r3, r3
 8000e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e8e:	9307      	strge	r3, [sp, #28]
 8000e90:	9307      	strlt	r3, [sp, #28]
 8000e92:	bfb8      	it	lt
 8000e94:	9204      	strlt	r2, [sp, #16]
 8000e96:	7823      	ldrb	r3, [r4, #0]
 8000e98:	2b2e      	cmp	r3, #46	; 0x2e
 8000e9a:	d10c      	bne.n	8000eb6 <_vfiprintf_r+0x176>
 8000e9c:	7863      	ldrb	r3, [r4, #1]
 8000e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8000ea0:	d135      	bne.n	8000f0e <_vfiprintf_r+0x1ce>
 8000ea2:	9b03      	ldr	r3, [sp, #12]
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	9203      	str	r2, [sp, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bfb8      	it	lt
 8000eae:	f04f 33ff 	movlt.w	r3, #4294967295
 8000eb2:	3402      	adds	r4, #2
 8000eb4:	9305      	str	r3, [sp, #20]
 8000eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000f9c <_vfiprintf_r+0x25c>
 8000eba:	7821      	ldrb	r1, [r4, #0]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4650      	mov	r0, sl
 8000ec0:	f7ff f9a6 	bl	8000210 <memchr>
 8000ec4:	b140      	cbz	r0, 8000ed8 <_vfiprintf_r+0x198>
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	eba0 000a 	sub.w	r0, r0, sl
 8000ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8000ed0:	9b04      	ldr	r3, [sp, #16]
 8000ed2:	4303      	orrs	r3, r0
 8000ed4:	3401      	adds	r4, #1
 8000ed6:	9304      	str	r3, [sp, #16]
 8000ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000edc:	482c      	ldr	r0, [pc, #176]	; (8000f90 <_vfiprintf_r+0x250>)
 8000ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ee2:	2206      	movs	r2, #6
 8000ee4:	f7ff f994 	bl	8000210 <memchr>
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d03f      	beq.n	8000f6c <_vfiprintf_r+0x22c>
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <_vfiprintf_r+0x254>)
 8000eee:	bb1b      	cbnz	r3, 8000f38 <_vfiprintf_r+0x1f8>
 8000ef0:	9b03      	ldr	r3, [sp, #12]
 8000ef2:	3307      	adds	r3, #7
 8000ef4:	f023 0307 	bic.w	r3, r3, #7
 8000ef8:	3308      	adds	r3, #8
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000efe:	443b      	add	r3, r7
 8000f00:	9309      	str	r3, [sp, #36]	; 0x24
 8000f02:	e767      	b.n	8000dd4 <_vfiprintf_r+0x94>
 8000f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f08:	460c      	mov	r4, r1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	e7a5      	b.n	8000e5a <_vfiprintf_r+0x11a>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	3401      	adds	r4, #1
 8000f12:	9305      	str	r3, [sp, #20]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 0c0a 	mov.w	ip, #10
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f20:	3a30      	subs	r2, #48	; 0x30
 8000f22:	2a09      	cmp	r2, #9
 8000f24:	d903      	bls.n	8000f2e <_vfiprintf_r+0x1ee>
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0c5      	beq.n	8000eb6 <_vfiprintf_r+0x176>
 8000f2a:	9105      	str	r1, [sp, #20]
 8000f2c:	e7c3      	b.n	8000eb6 <_vfiprintf_r+0x176>
 8000f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f32:	4604      	mov	r4, r0
 8000f34:	2301      	movs	r3, #1
 8000f36:	e7f0      	b.n	8000f1a <_vfiprintf_r+0x1da>
 8000f38:	ab03      	add	r3, sp, #12
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	462a      	mov	r2, r5
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <_vfiprintf_r+0x258>)
 8000f40:	a904      	add	r1, sp, #16
 8000f42:	4630      	mov	r0, r6
 8000f44:	f3af 8000 	nop.w
 8000f48:	4607      	mov	r7, r0
 8000f4a:	1c78      	adds	r0, r7, #1
 8000f4c:	d1d6      	bne.n	8000efc <_vfiprintf_r+0x1bc>
 8000f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f50:	07d9      	lsls	r1, r3, #31
 8000f52:	d405      	bmi.n	8000f60 <_vfiprintf_r+0x220>
 8000f54:	89ab      	ldrh	r3, [r5, #12]
 8000f56:	059a      	lsls	r2, r3, #22
 8000f58:	d402      	bmi.n	8000f60 <_vfiprintf_r+0x220>
 8000f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f5c:	f7ff fe6b 	bl	8000c36 <__retarget_lock_release_recursive>
 8000f60:	89ab      	ldrh	r3, [r5, #12]
 8000f62:	065b      	lsls	r3, r3, #25
 8000f64:	f53f af12 	bmi.w	8000d8c <_vfiprintf_r+0x4c>
 8000f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f6a:	e711      	b.n	8000d90 <_vfiprintf_r+0x50>
 8000f6c:	ab03      	add	r3, sp, #12
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	462a      	mov	r2, r5
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <_vfiprintf_r+0x258>)
 8000f74:	a904      	add	r1, sp, #16
 8000f76:	4630      	mov	r0, r6
 8000f78:	f000 f880 	bl	800107c <_printf_i>
 8000f7c:	e7e4      	b.n	8000f48 <_vfiprintf_r+0x208>
 8000f7e:	bf00      	nop
 8000f80:	08001940 	.word	0x08001940
 8000f84:	08001960 	.word	0x08001960
 8000f88:	08001920 	.word	0x08001920
 8000f8c:	08001980 	.word	0x08001980
 8000f90:	0800198a 	.word	0x0800198a
 8000f94:	00000000 	.word	0x00000000
 8000f98:	08000d1b 	.word	0x08000d1b
 8000f9c:	08001986 	.word	0x08001986

08000fa0 <_printf_common>:
 8000fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa4:	4616      	mov	r6, r2
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	688a      	ldr	r2, [r1, #8]
 8000faa:	690b      	ldr	r3, [r1, #16]
 8000fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	bfb8      	it	lt
 8000fb4:	4613      	movlt	r3, r2
 8000fb6:	6033      	str	r3, [r6, #0]
 8000fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fbc:	4607      	mov	r7, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	b10a      	cbz	r2, 8000fc6 <_printf_common+0x26>
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	6033      	str	r3, [r6, #0]
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	0699      	lsls	r1, r3, #26
 8000fca:	bf42      	ittt	mi
 8000fcc:	6833      	ldrmi	r3, [r6, #0]
 8000fce:	3302      	addmi	r3, #2
 8000fd0:	6033      	strmi	r3, [r6, #0]
 8000fd2:	6825      	ldr	r5, [r4, #0]
 8000fd4:	f015 0506 	ands.w	r5, r5, #6
 8000fd8:	d106      	bne.n	8000fe8 <_printf_common+0x48>
 8000fda:	f104 0a19 	add.w	sl, r4, #25
 8000fde:	68e3      	ldr	r3, [r4, #12]
 8000fe0:	6832      	ldr	r2, [r6, #0]
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	42ab      	cmp	r3, r5
 8000fe6:	dc26      	bgt.n	8001036 <_printf_common+0x96>
 8000fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fec:	1e13      	subs	r3, r2, #0
 8000fee:	6822      	ldr	r2, [r4, #0]
 8000ff0:	bf18      	it	ne
 8000ff2:	2301      	movne	r3, #1
 8000ff4:	0692      	lsls	r2, r2, #26
 8000ff6:	d42b      	bmi.n	8001050 <_printf_common+0xb0>
 8000ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	4638      	mov	r0, r7
 8001000:	47c0      	blx	r8
 8001002:	3001      	adds	r0, #1
 8001004:	d01e      	beq.n	8001044 <_printf_common+0xa4>
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	68e5      	ldr	r5, [r4, #12]
 800100a:	6832      	ldr	r2, [r6, #0]
 800100c:	f003 0306 	and.w	r3, r3, #6
 8001010:	2b04      	cmp	r3, #4
 8001012:	bf08      	it	eq
 8001014:	1aad      	subeq	r5, r5, r2
 8001016:	68a3      	ldr	r3, [r4, #8]
 8001018:	6922      	ldr	r2, [r4, #16]
 800101a:	bf0c      	ite	eq
 800101c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001020:	2500      	movne	r5, #0
 8001022:	4293      	cmp	r3, r2
 8001024:	bfc4      	itt	gt
 8001026:	1a9b      	subgt	r3, r3, r2
 8001028:	18ed      	addgt	r5, r5, r3
 800102a:	2600      	movs	r6, #0
 800102c:	341a      	adds	r4, #26
 800102e:	42b5      	cmp	r5, r6
 8001030:	d11a      	bne.n	8001068 <_printf_common+0xc8>
 8001032:	2000      	movs	r0, #0
 8001034:	e008      	b.n	8001048 <_printf_common+0xa8>
 8001036:	2301      	movs	r3, #1
 8001038:	4652      	mov	r2, sl
 800103a:	4649      	mov	r1, r9
 800103c:	4638      	mov	r0, r7
 800103e:	47c0      	blx	r8
 8001040:	3001      	adds	r0, #1
 8001042:	d103      	bne.n	800104c <_printf_common+0xac>
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104c:	3501      	adds	r5, #1
 800104e:	e7c6      	b.n	8000fde <_printf_common+0x3e>
 8001050:	18e1      	adds	r1, r4, r3
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	2030      	movs	r0, #48	; 0x30
 8001056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800105a:	4422      	add	r2, r4
 800105c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001064:	3302      	adds	r3, #2
 8001066:	e7c7      	b.n	8000ff8 <_printf_common+0x58>
 8001068:	2301      	movs	r3, #1
 800106a:	4622      	mov	r2, r4
 800106c:	4649      	mov	r1, r9
 800106e:	4638      	mov	r0, r7
 8001070:	47c0      	blx	r8
 8001072:	3001      	adds	r0, #1
 8001074:	d0e6      	beq.n	8001044 <_printf_common+0xa4>
 8001076:	3601      	adds	r6, #1
 8001078:	e7d9      	b.n	800102e <_printf_common+0x8e>
	...

0800107c <_printf_i>:
 800107c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001080:	460c      	mov	r4, r1
 8001082:	4691      	mov	r9, r2
 8001084:	7e27      	ldrb	r7, [r4, #24]
 8001086:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001088:	2f78      	cmp	r7, #120	; 0x78
 800108a:	4680      	mov	r8, r0
 800108c:	469a      	mov	sl, r3
 800108e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001092:	d807      	bhi.n	80010a4 <_printf_i+0x28>
 8001094:	2f62      	cmp	r7, #98	; 0x62
 8001096:	d80a      	bhi.n	80010ae <_printf_i+0x32>
 8001098:	2f00      	cmp	r7, #0
 800109a:	f000 80d8 	beq.w	800124e <_printf_i+0x1d2>
 800109e:	2f58      	cmp	r7, #88	; 0x58
 80010a0:	f000 80a3 	beq.w	80011ea <_printf_i+0x16e>
 80010a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80010a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010ac:	e03a      	b.n	8001124 <_printf_i+0xa8>
 80010ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010b2:	2b15      	cmp	r3, #21
 80010b4:	d8f6      	bhi.n	80010a4 <_printf_i+0x28>
 80010b6:	a001      	add	r0, pc, #4	; (adr r0, 80010bc <_printf_i+0x40>)
 80010b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80010bc:	08001115 	.word	0x08001115
 80010c0:	08001129 	.word	0x08001129
 80010c4:	080010a5 	.word	0x080010a5
 80010c8:	080010a5 	.word	0x080010a5
 80010cc:	080010a5 	.word	0x080010a5
 80010d0:	080010a5 	.word	0x080010a5
 80010d4:	08001129 	.word	0x08001129
 80010d8:	080010a5 	.word	0x080010a5
 80010dc:	080010a5 	.word	0x080010a5
 80010e0:	080010a5 	.word	0x080010a5
 80010e4:	080010a5 	.word	0x080010a5
 80010e8:	08001235 	.word	0x08001235
 80010ec:	08001159 	.word	0x08001159
 80010f0:	08001217 	.word	0x08001217
 80010f4:	080010a5 	.word	0x080010a5
 80010f8:	080010a5 	.word	0x080010a5
 80010fc:	08001257 	.word	0x08001257
 8001100:	080010a5 	.word	0x080010a5
 8001104:	08001159 	.word	0x08001159
 8001108:	080010a5 	.word	0x080010a5
 800110c:	080010a5 	.word	0x080010a5
 8001110:	0800121f 	.word	0x0800121f
 8001114:	680b      	ldr	r3, [r1, #0]
 8001116:	1d1a      	adds	r2, r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	600a      	str	r2, [r1, #0]
 800111c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001124:	2301      	movs	r3, #1
 8001126:	e0a3      	b.n	8001270 <_printf_i+0x1f4>
 8001128:	6825      	ldr	r5, [r4, #0]
 800112a:	6808      	ldr	r0, [r1, #0]
 800112c:	062e      	lsls	r6, r5, #24
 800112e:	f100 0304 	add.w	r3, r0, #4
 8001132:	d50a      	bpl.n	800114a <_printf_i+0xce>
 8001134:	6805      	ldr	r5, [r0, #0]
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	2d00      	cmp	r5, #0
 800113a:	da03      	bge.n	8001144 <_printf_i+0xc8>
 800113c:	232d      	movs	r3, #45	; 0x2d
 800113e:	426d      	negs	r5, r5
 8001140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001144:	485e      	ldr	r0, [pc, #376]	; (80012c0 <_printf_i+0x244>)
 8001146:	230a      	movs	r3, #10
 8001148:	e019      	b.n	800117e <_printf_i+0x102>
 800114a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800114e:	6805      	ldr	r5, [r0, #0]
 8001150:	600b      	str	r3, [r1, #0]
 8001152:	bf18      	it	ne
 8001154:	b22d      	sxthne	r5, r5
 8001156:	e7ef      	b.n	8001138 <_printf_i+0xbc>
 8001158:	680b      	ldr	r3, [r1, #0]
 800115a:	6825      	ldr	r5, [r4, #0]
 800115c:	1d18      	adds	r0, r3, #4
 800115e:	6008      	str	r0, [r1, #0]
 8001160:	0628      	lsls	r0, r5, #24
 8001162:	d501      	bpl.n	8001168 <_printf_i+0xec>
 8001164:	681d      	ldr	r5, [r3, #0]
 8001166:	e002      	b.n	800116e <_printf_i+0xf2>
 8001168:	0669      	lsls	r1, r5, #25
 800116a:	d5fb      	bpl.n	8001164 <_printf_i+0xe8>
 800116c:	881d      	ldrh	r5, [r3, #0]
 800116e:	4854      	ldr	r0, [pc, #336]	; (80012c0 <_printf_i+0x244>)
 8001170:	2f6f      	cmp	r7, #111	; 0x6f
 8001172:	bf0c      	ite	eq
 8001174:	2308      	moveq	r3, #8
 8001176:	230a      	movne	r3, #10
 8001178:	2100      	movs	r1, #0
 800117a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800117e:	6866      	ldr	r6, [r4, #4]
 8001180:	60a6      	str	r6, [r4, #8]
 8001182:	2e00      	cmp	r6, #0
 8001184:	bfa2      	ittt	ge
 8001186:	6821      	ldrge	r1, [r4, #0]
 8001188:	f021 0104 	bicge.w	r1, r1, #4
 800118c:	6021      	strge	r1, [r4, #0]
 800118e:	b90d      	cbnz	r5, 8001194 <_printf_i+0x118>
 8001190:	2e00      	cmp	r6, #0
 8001192:	d04d      	beq.n	8001230 <_printf_i+0x1b4>
 8001194:	4616      	mov	r6, r2
 8001196:	fbb5 f1f3 	udiv	r1, r5, r3
 800119a:	fb03 5711 	mls	r7, r3, r1, r5
 800119e:	5dc7      	ldrb	r7, [r0, r7]
 80011a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011a4:	462f      	mov	r7, r5
 80011a6:	42bb      	cmp	r3, r7
 80011a8:	460d      	mov	r5, r1
 80011aa:	d9f4      	bls.n	8001196 <_printf_i+0x11a>
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d10b      	bne.n	80011c8 <_printf_i+0x14c>
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	07df      	lsls	r7, r3, #31
 80011b4:	d508      	bpl.n	80011c8 <_printf_i+0x14c>
 80011b6:	6923      	ldr	r3, [r4, #16]
 80011b8:	6861      	ldr	r1, [r4, #4]
 80011ba:	4299      	cmp	r1, r3
 80011bc:	bfde      	ittt	le
 80011be:	2330      	movle	r3, #48	; 0x30
 80011c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011c8:	1b92      	subs	r2, r2, r6
 80011ca:	6122      	str	r2, [r4, #16]
 80011cc:	f8cd a000 	str.w	sl, [sp]
 80011d0:	464b      	mov	r3, r9
 80011d2:	aa03      	add	r2, sp, #12
 80011d4:	4621      	mov	r1, r4
 80011d6:	4640      	mov	r0, r8
 80011d8:	f7ff fee2 	bl	8000fa0 <_printf_common>
 80011dc:	3001      	adds	r0, #1
 80011de:	d14c      	bne.n	800127a <_printf_i+0x1fe>
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	b004      	add	sp, #16
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	4835      	ldr	r0, [pc, #212]	; (80012c0 <_printf_i+0x244>)
 80011ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	680e      	ldr	r6, [r1, #0]
 80011f4:	061f      	lsls	r7, r3, #24
 80011f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80011fa:	600e      	str	r6, [r1, #0]
 80011fc:	d514      	bpl.n	8001228 <_printf_i+0x1ac>
 80011fe:	07d9      	lsls	r1, r3, #31
 8001200:	bf44      	itt	mi
 8001202:	f043 0320 	orrmi.w	r3, r3, #32
 8001206:	6023      	strmi	r3, [r4, #0]
 8001208:	b91d      	cbnz	r5, 8001212 <_printf_i+0x196>
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f023 0320 	bic.w	r3, r3, #32
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	2310      	movs	r3, #16
 8001214:	e7b0      	b.n	8001178 <_printf_i+0xfc>
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	2378      	movs	r3, #120	; 0x78
 8001220:	4828      	ldr	r0, [pc, #160]	; (80012c4 <_printf_i+0x248>)
 8001222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001226:	e7e3      	b.n	80011f0 <_printf_i+0x174>
 8001228:	065e      	lsls	r6, r3, #25
 800122a:	bf48      	it	mi
 800122c:	b2ad      	uxthmi	r5, r5
 800122e:	e7e6      	b.n	80011fe <_printf_i+0x182>
 8001230:	4616      	mov	r6, r2
 8001232:	e7bb      	b.n	80011ac <_printf_i+0x130>
 8001234:	680b      	ldr	r3, [r1, #0]
 8001236:	6826      	ldr	r6, [r4, #0]
 8001238:	6960      	ldr	r0, [r4, #20]
 800123a:	1d1d      	adds	r5, r3, #4
 800123c:	600d      	str	r5, [r1, #0]
 800123e:	0635      	lsls	r5, r6, #24
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	d501      	bpl.n	8001248 <_printf_i+0x1cc>
 8001244:	6018      	str	r0, [r3, #0]
 8001246:	e002      	b.n	800124e <_printf_i+0x1d2>
 8001248:	0671      	lsls	r1, r6, #25
 800124a:	d5fb      	bpl.n	8001244 <_printf_i+0x1c8>
 800124c:	8018      	strh	r0, [r3, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	6123      	str	r3, [r4, #16]
 8001252:	4616      	mov	r6, r2
 8001254:	e7ba      	b.n	80011cc <_printf_i+0x150>
 8001256:	680b      	ldr	r3, [r1, #0]
 8001258:	1d1a      	adds	r2, r3, #4
 800125a:	600a      	str	r2, [r1, #0]
 800125c:	681e      	ldr	r6, [r3, #0]
 800125e:	6862      	ldr	r2, [r4, #4]
 8001260:	2100      	movs	r1, #0
 8001262:	4630      	mov	r0, r6
 8001264:	f7fe ffd4 	bl	8000210 <memchr>
 8001268:	b108      	cbz	r0, 800126e <_printf_i+0x1f2>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	6060      	str	r0, [r4, #4]
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	6123      	str	r3, [r4, #16]
 8001272:	2300      	movs	r3, #0
 8001274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001278:	e7a8      	b.n	80011cc <_printf_i+0x150>
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	4632      	mov	r2, r6
 800127e:	4649      	mov	r1, r9
 8001280:	4640      	mov	r0, r8
 8001282:	47d0      	blx	sl
 8001284:	3001      	adds	r0, #1
 8001286:	d0ab      	beq.n	80011e0 <_printf_i+0x164>
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	079b      	lsls	r3, r3, #30
 800128c:	d413      	bmi.n	80012b6 <_printf_i+0x23a>
 800128e:	68e0      	ldr	r0, [r4, #12]
 8001290:	9b03      	ldr	r3, [sp, #12]
 8001292:	4298      	cmp	r0, r3
 8001294:	bfb8      	it	lt
 8001296:	4618      	movlt	r0, r3
 8001298:	e7a4      	b.n	80011e4 <_printf_i+0x168>
 800129a:	2301      	movs	r3, #1
 800129c:	4632      	mov	r2, r6
 800129e:	4649      	mov	r1, r9
 80012a0:	4640      	mov	r0, r8
 80012a2:	47d0      	blx	sl
 80012a4:	3001      	adds	r0, #1
 80012a6:	d09b      	beq.n	80011e0 <_printf_i+0x164>
 80012a8:	3501      	adds	r5, #1
 80012aa:	68e3      	ldr	r3, [r4, #12]
 80012ac:	9903      	ldr	r1, [sp, #12]
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	42ab      	cmp	r3, r5
 80012b2:	dcf2      	bgt.n	800129a <_printf_i+0x21e>
 80012b4:	e7eb      	b.n	800128e <_printf_i+0x212>
 80012b6:	2500      	movs	r5, #0
 80012b8:	f104 0619 	add.w	r6, r4, #25
 80012bc:	e7f5      	b.n	80012aa <_printf_i+0x22e>
 80012be:	bf00      	nop
 80012c0:	08001991 	.word	0x08001991
 80012c4:	080019a2 	.word	0x080019a2

080012c8 <_sbrk_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d06      	ldr	r5, [pc, #24]	; (80012e4 <_sbrk_r+0x1c>)
 80012cc:	2300      	movs	r3, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602b      	str	r3, [r5, #0]
 80012d4:	f7ff fa2a 	bl	800072c <_sbrk>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d102      	bne.n	80012e2 <_sbrk_r+0x1a>
 80012dc:	682b      	ldr	r3, [r5, #0]
 80012de:	b103      	cbz	r3, 80012e2 <_sbrk_r+0x1a>
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
 80012e4:	2000009c 	.word	0x2000009c

080012e8 <__sread>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	460c      	mov	r4, r1
 80012ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f0:	f000 fab4 	bl	800185c <_read_r>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	bfab      	itete	ge
 80012f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012fa:	89a3      	ldrhlt	r3, [r4, #12]
 80012fc:	181b      	addge	r3, r3, r0
 80012fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001302:	bfac      	ite	ge
 8001304:	6563      	strge	r3, [r4, #84]	; 0x54
 8001306:	81a3      	strhlt	r3, [r4, #12]
 8001308:	bd10      	pop	{r4, pc}

0800130a <__swrite>:
 800130a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130e:	461f      	mov	r7, r3
 8001310:	898b      	ldrh	r3, [r1, #12]
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	4605      	mov	r5, r0
 8001316:	460c      	mov	r4, r1
 8001318:	4616      	mov	r6, r2
 800131a:	d505      	bpl.n	8001328 <__swrite+0x1e>
 800131c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001320:	2302      	movs	r3, #2
 8001322:	2200      	movs	r2, #0
 8001324:	f000 f9c8 	bl	80016b8 <_lseek_r>
 8001328:	89a3      	ldrh	r3, [r4, #12]
 800132a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800132e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001332:	81a3      	strh	r3, [r4, #12]
 8001334:	4632      	mov	r2, r6
 8001336:	463b      	mov	r3, r7
 8001338:	4628      	mov	r0, r5
 800133a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800133e:	f000 b869 	b.w	8001414 <_write_r>

08001342 <__sseek>:
 8001342:	b510      	push	{r4, lr}
 8001344:	460c      	mov	r4, r1
 8001346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800134a:	f000 f9b5 	bl	80016b8 <_lseek_r>
 800134e:	1c43      	adds	r3, r0, #1
 8001350:	89a3      	ldrh	r3, [r4, #12]
 8001352:	bf15      	itete	ne
 8001354:	6560      	strne	r0, [r4, #84]	; 0x54
 8001356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800135a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800135e:	81a3      	strheq	r3, [r4, #12]
 8001360:	bf18      	it	ne
 8001362:	81a3      	strhne	r3, [r4, #12]
 8001364:	bd10      	pop	{r4, pc}

08001366 <__sclose>:
 8001366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800136a:	f000 b8d3 	b.w	8001514 <_close_r>
	...

08001370 <__swbuf_r>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	460e      	mov	r6, r1
 8001374:	4614      	mov	r4, r2
 8001376:	4605      	mov	r5, r0
 8001378:	b118      	cbz	r0, 8001382 <__swbuf_r+0x12>
 800137a:	6983      	ldr	r3, [r0, #24]
 800137c:	b90b      	cbnz	r3, 8001382 <__swbuf_r+0x12>
 800137e:	f7ff fbbb 	bl	8000af8 <__sinit>
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <__swbuf_r+0x98>)
 8001384:	429c      	cmp	r4, r3
 8001386:	d12b      	bne.n	80013e0 <__swbuf_r+0x70>
 8001388:	686c      	ldr	r4, [r5, #4]
 800138a:	69a3      	ldr	r3, [r4, #24]
 800138c:	60a3      	str	r3, [r4, #8]
 800138e:	89a3      	ldrh	r3, [r4, #12]
 8001390:	071a      	lsls	r2, r3, #28
 8001392:	d52f      	bpl.n	80013f4 <__swbuf_r+0x84>
 8001394:	6923      	ldr	r3, [r4, #16]
 8001396:	b36b      	cbz	r3, 80013f4 <__swbuf_r+0x84>
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	1ac0      	subs	r0, r0, r3
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	b2f6      	uxtb	r6, r6
 80013a2:	4283      	cmp	r3, r0
 80013a4:	4637      	mov	r7, r6
 80013a6:	dc04      	bgt.n	80013b2 <__swbuf_r+0x42>
 80013a8:	4621      	mov	r1, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	f000 f948 	bl	8001640 <_fflush_r>
 80013b0:	bb30      	cbnz	r0, 8001400 <__swbuf_r+0x90>
 80013b2:	68a3      	ldr	r3, [r4, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60a3      	str	r3, [r4, #8]
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	6022      	str	r2, [r4, #0]
 80013be:	701e      	strb	r6, [r3, #0]
 80013c0:	6963      	ldr	r3, [r4, #20]
 80013c2:	3001      	adds	r0, #1
 80013c4:	4283      	cmp	r3, r0
 80013c6:	d004      	beq.n	80013d2 <__swbuf_r+0x62>
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	07db      	lsls	r3, r3, #31
 80013cc:	d506      	bpl.n	80013dc <__swbuf_r+0x6c>
 80013ce:	2e0a      	cmp	r6, #10
 80013d0:	d104      	bne.n	80013dc <__swbuf_r+0x6c>
 80013d2:	4621      	mov	r1, r4
 80013d4:	4628      	mov	r0, r5
 80013d6:	f000 f933 	bl	8001640 <_fflush_r>
 80013da:	b988      	cbnz	r0, 8001400 <__swbuf_r+0x90>
 80013dc:	4638      	mov	r0, r7
 80013de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <__swbuf_r+0x9c>)
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d101      	bne.n	80013ea <__swbuf_r+0x7a>
 80013e6:	68ac      	ldr	r4, [r5, #8]
 80013e8:	e7cf      	b.n	800138a <__swbuf_r+0x1a>
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <__swbuf_r+0xa0>)
 80013ec:	429c      	cmp	r4, r3
 80013ee:	bf08      	it	eq
 80013f0:	68ec      	ldreq	r4, [r5, #12]
 80013f2:	e7ca      	b.n	800138a <__swbuf_r+0x1a>
 80013f4:	4621      	mov	r1, r4
 80013f6:	4628      	mov	r0, r5
 80013f8:	f000 f81e 	bl	8001438 <__swsetup_r>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d0cb      	beq.n	8001398 <__swbuf_r+0x28>
 8001400:	f04f 37ff 	mov.w	r7, #4294967295
 8001404:	e7ea      	b.n	80013dc <__swbuf_r+0x6c>
 8001406:	bf00      	nop
 8001408:	08001940 	.word	0x08001940
 800140c:	08001960 	.word	0x08001960
 8001410:	08001920 	.word	0x08001920

08001414 <_write_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4d07      	ldr	r5, [pc, #28]	; (8001434 <_write_r+0x20>)
 8001418:	4604      	mov	r4, r0
 800141a:	4608      	mov	r0, r1
 800141c:	4611      	mov	r1, r2
 800141e:	2200      	movs	r2, #0
 8001420:	602a      	str	r2, [r5, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	f7ff f931 	bl	800068a <_write>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_write_r+0x1e>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_write_r+0x1e>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	2000009c 	.word	0x2000009c

08001438 <__swsetup_r>:
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <__swsetup_r+0xcc>)
 800143a:	b570      	push	{r4, r5, r6, lr}
 800143c:	681d      	ldr	r5, [r3, #0]
 800143e:	4606      	mov	r6, r0
 8001440:	460c      	mov	r4, r1
 8001442:	b125      	cbz	r5, 800144e <__swsetup_r+0x16>
 8001444:	69ab      	ldr	r3, [r5, #24]
 8001446:	b913      	cbnz	r3, 800144e <__swsetup_r+0x16>
 8001448:	4628      	mov	r0, r5
 800144a:	f7ff fb55 	bl	8000af8 <__sinit>
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <__swsetup_r+0xd0>)
 8001450:	429c      	cmp	r4, r3
 8001452:	d10f      	bne.n	8001474 <__swsetup_r+0x3c>
 8001454:	686c      	ldr	r4, [r5, #4]
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800145c:	0719      	lsls	r1, r3, #28
 800145e:	d42c      	bmi.n	80014ba <__swsetup_r+0x82>
 8001460:	06dd      	lsls	r5, r3, #27
 8001462:	d411      	bmi.n	8001488 <__swsetup_r+0x50>
 8001464:	2309      	movs	r3, #9
 8001466:	6033      	str	r3, [r6, #0]
 8001468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800146c:	81a3      	strh	r3, [r4, #12]
 800146e:	f04f 30ff 	mov.w	r0, #4294967295
 8001472:	e03e      	b.n	80014f2 <__swsetup_r+0xba>
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <__swsetup_r+0xd4>)
 8001476:	429c      	cmp	r4, r3
 8001478:	d101      	bne.n	800147e <__swsetup_r+0x46>
 800147a:	68ac      	ldr	r4, [r5, #8]
 800147c:	e7eb      	b.n	8001456 <__swsetup_r+0x1e>
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <__swsetup_r+0xd8>)
 8001480:	429c      	cmp	r4, r3
 8001482:	bf08      	it	eq
 8001484:	68ec      	ldreq	r4, [r5, #12]
 8001486:	e7e6      	b.n	8001456 <__swsetup_r+0x1e>
 8001488:	0758      	lsls	r0, r3, #29
 800148a:	d512      	bpl.n	80014b2 <__swsetup_r+0x7a>
 800148c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800148e:	b141      	cbz	r1, 80014a2 <__swsetup_r+0x6a>
 8001490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001494:	4299      	cmp	r1, r3
 8001496:	d002      	beq.n	800149e <__swsetup_r+0x66>
 8001498:	4630      	mov	r0, r6
 800149a:	f000 f98f 	bl	80017bc <_free_r>
 800149e:	2300      	movs	r3, #0
 80014a0:	6363      	str	r3, [r4, #52]	; 0x34
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014a8:	81a3      	strh	r3, [r4, #12]
 80014aa:	2300      	movs	r3, #0
 80014ac:	6063      	str	r3, [r4, #4]
 80014ae:	6923      	ldr	r3, [r4, #16]
 80014b0:	6023      	str	r3, [r4, #0]
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	b94b      	cbnz	r3, 80014d2 <__swsetup_r+0x9a>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c8:	d003      	beq.n	80014d2 <__swsetup_r+0x9a>
 80014ca:	4621      	mov	r1, r4
 80014cc:	4630      	mov	r0, r6
 80014ce:	f000 f929 	bl	8001724 <__smakebuf_r>
 80014d2:	89a0      	ldrh	r0, [r4, #12]
 80014d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014d8:	f010 0301 	ands.w	r3, r0, #1
 80014dc:	d00a      	beq.n	80014f4 <__swsetup_r+0xbc>
 80014de:	2300      	movs	r3, #0
 80014e0:	60a3      	str	r3, [r4, #8]
 80014e2:	6963      	ldr	r3, [r4, #20]
 80014e4:	425b      	negs	r3, r3
 80014e6:	61a3      	str	r3, [r4, #24]
 80014e8:	6923      	ldr	r3, [r4, #16]
 80014ea:	b943      	cbnz	r3, 80014fe <__swsetup_r+0xc6>
 80014ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80014f0:	d1ba      	bne.n	8001468 <__swsetup_r+0x30>
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
 80014f4:	0781      	lsls	r1, r0, #30
 80014f6:	bf58      	it	pl
 80014f8:	6963      	ldrpl	r3, [r4, #20]
 80014fa:	60a3      	str	r3, [r4, #8]
 80014fc:	e7f4      	b.n	80014e8 <__swsetup_r+0xb0>
 80014fe:	2000      	movs	r0, #0
 8001500:	e7f7      	b.n	80014f2 <__swsetup_r+0xba>
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000
 8001508:	08001940 	.word	0x08001940
 800150c:	08001960 	.word	0x08001960
 8001510:	08001920 	.word	0x08001920

08001514 <_close_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	; (8001530 <_close_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7ff f8cf 	bl	80006c2 <_close>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_close_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_close_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	2000009c 	.word	0x2000009c

08001534 <__sflush_r>:
 8001534:	898a      	ldrh	r2, [r1, #12]
 8001536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153a:	4605      	mov	r5, r0
 800153c:	0710      	lsls	r0, r2, #28
 800153e:	460c      	mov	r4, r1
 8001540:	d458      	bmi.n	80015f4 <__sflush_r+0xc0>
 8001542:	684b      	ldr	r3, [r1, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dc05      	bgt.n	8001554 <__sflush_r+0x20>
 8001548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	dc02      	bgt.n	8001554 <__sflush_r+0x20>
 800154e:	2000      	movs	r0, #0
 8001550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001556:	2e00      	cmp	r6, #0
 8001558:	d0f9      	beq.n	800154e <__sflush_r+0x1a>
 800155a:	2300      	movs	r3, #0
 800155c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001560:	682f      	ldr	r7, [r5, #0]
 8001562:	602b      	str	r3, [r5, #0]
 8001564:	d032      	beq.n	80015cc <__sflush_r+0x98>
 8001566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001568:	89a3      	ldrh	r3, [r4, #12]
 800156a:	075a      	lsls	r2, r3, #29
 800156c:	d505      	bpl.n	800157a <__sflush_r+0x46>
 800156e:	6863      	ldr	r3, [r4, #4]
 8001570:	1ac0      	subs	r0, r0, r3
 8001572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001574:	b10b      	cbz	r3, 800157a <__sflush_r+0x46>
 8001576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001578:	1ac0      	subs	r0, r0, r3
 800157a:	2300      	movs	r3, #0
 800157c:	4602      	mov	r2, r0
 800157e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001580:	6a21      	ldr	r1, [r4, #32]
 8001582:	4628      	mov	r0, r5
 8001584:	47b0      	blx	r6
 8001586:	1c43      	adds	r3, r0, #1
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	d106      	bne.n	800159a <__sflush_r+0x66>
 800158c:	6829      	ldr	r1, [r5, #0]
 800158e:	291d      	cmp	r1, #29
 8001590:	d82c      	bhi.n	80015ec <__sflush_r+0xb8>
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <__sflush_r+0x108>)
 8001594:	40ca      	lsrs	r2, r1
 8001596:	07d6      	lsls	r6, r2, #31
 8001598:	d528      	bpl.n	80015ec <__sflush_r+0xb8>
 800159a:	2200      	movs	r2, #0
 800159c:	6062      	str	r2, [r4, #4]
 800159e:	04d9      	lsls	r1, r3, #19
 80015a0:	6922      	ldr	r2, [r4, #16]
 80015a2:	6022      	str	r2, [r4, #0]
 80015a4:	d504      	bpl.n	80015b0 <__sflush_r+0x7c>
 80015a6:	1c42      	adds	r2, r0, #1
 80015a8:	d101      	bne.n	80015ae <__sflush_r+0x7a>
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	b903      	cbnz	r3, 80015b0 <__sflush_r+0x7c>
 80015ae:	6560      	str	r0, [r4, #84]	; 0x54
 80015b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015b2:	602f      	str	r7, [r5, #0]
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d0ca      	beq.n	800154e <__sflush_r+0x1a>
 80015b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015bc:	4299      	cmp	r1, r3
 80015be:	d002      	beq.n	80015c6 <__sflush_r+0x92>
 80015c0:	4628      	mov	r0, r5
 80015c2:	f000 f8fb 	bl	80017bc <_free_r>
 80015c6:	2000      	movs	r0, #0
 80015c8:	6360      	str	r0, [r4, #52]	; 0x34
 80015ca:	e7c1      	b.n	8001550 <__sflush_r+0x1c>
 80015cc:	6a21      	ldr	r1, [r4, #32]
 80015ce:	2301      	movs	r3, #1
 80015d0:	4628      	mov	r0, r5
 80015d2:	47b0      	blx	r6
 80015d4:	1c41      	adds	r1, r0, #1
 80015d6:	d1c7      	bne.n	8001568 <__sflush_r+0x34>
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0c4      	beq.n	8001568 <__sflush_r+0x34>
 80015de:	2b1d      	cmp	r3, #29
 80015e0:	d001      	beq.n	80015e6 <__sflush_r+0xb2>
 80015e2:	2b16      	cmp	r3, #22
 80015e4:	d101      	bne.n	80015ea <__sflush_r+0xb6>
 80015e6:	602f      	str	r7, [r5, #0]
 80015e8:	e7b1      	b.n	800154e <__sflush_r+0x1a>
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f0:	81a3      	strh	r3, [r4, #12]
 80015f2:	e7ad      	b.n	8001550 <__sflush_r+0x1c>
 80015f4:	690f      	ldr	r7, [r1, #16]
 80015f6:	2f00      	cmp	r7, #0
 80015f8:	d0a9      	beq.n	800154e <__sflush_r+0x1a>
 80015fa:	0793      	lsls	r3, r2, #30
 80015fc:	680e      	ldr	r6, [r1, #0]
 80015fe:	bf08      	it	eq
 8001600:	694b      	ldreq	r3, [r1, #20]
 8001602:	600f      	str	r7, [r1, #0]
 8001604:	bf18      	it	ne
 8001606:	2300      	movne	r3, #0
 8001608:	eba6 0807 	sub.w	r8, r6, r7
 800160c:	608b      	str	r3, [r1, #8]
 800160e:	f1b8 0f00 	cmp.w	r8, #0
 8001612:	dd9c      	ble.n	800154e <__sflush_r+0x1a>
 8001614:	6a21      	ldr	r1, [r4, #32]
 8001616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001618:	4643      	mov	r3, r8
 800161a:	463a      	mov	r2, r7
 800161c:	4628      	mov	r0, r5
 800161e:	47b0      	blx	r6
 8001620:	2800      	cmp	r0, #0
 8001622:	dc06      	bgt.n	8001632 <__sflush_r+0xfe>
 8001624:	89a3      	ldrh	r3, [r4, #12]
 8001626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162a:	81a3      	strh	r3, [r4, #12]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	e78e      	b.n	8001550 <__sflush_r+0x1c>
 8001632:	4407      	add	r7, r0
 8001634:	eba8 0800 	sub.w	r8, r8, r0
 8001638:	e7e9      	b.n	800160e <__sflush_r+0xda>
 800163a:	bf00      	nop
 800163c:	20400001 	.word	0x20400001

08001640 <_fflush_r>:
 8001640:	b538      	push	{r3, r4, r5, lr}
 8001642:	690b      	ldr	r3, [r1, #16]
 8001644:	4605      	mov	r5, r0
 8001646:	460c      	mov	r4, r1
 8001648:	b913      	cbnz	r3, 8001650 <_fflush_r+0x10>
 800164a:	2500      	movs	r5, #0
 800164c:	4628      	mov	r0, r5
 800164e:	bd38      	pop	{r3, r4, r5, pc}
 8001650:	b118      	cbz	r0, 800165a <_fflush_r+0x1a>
 8001652:	6983      	ldr	r3, [r0, #24]
 8001654:	b90b      	cbnz	r3, 800165a <_fflush_r+0x1a>
 8001656:	f7ff fa4f 	bl	8000af8 <__sinit>
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <_fflush_r+0x6c>)
 800165c:	429c      	cmp	r4, r3
 800165e:	d11b      	bne.n	8001698 <_fflush_r+0x58>
 8001660:	686c      	ldr	r4, [r5, #4]
 8001662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0ef      	beq.n	800164a <_fflush_r+0xa>
 800166a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800166c:	07d0      	lsls	r0, r2, #31
 800166e:	d404      	bmi.n	800167a <_fflush_r+0x3a>
 8001670:	0599      	lsls	r1, r3, #22
 8001672:	d402      	bmi.n	800167a <_fflush_r+0x3a>
 8001674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001676:	f7ff fadd 	bl	8000c34 <__retarget_lock_acquire_recursive>
 800167a:	4628      	mov	r0, r5
 800167c:	4621      	mov	r1, r4
 800167e:	f7ff ff59 	bl	8001534 <__sflush_r>
 8001682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001684:	07da      	lsls	r2, r3, #31
 8001686:	4605      	mov	r5, r0
 8001688:	d4e0      	bmi.n	800164c <_fflush_r+0xc>
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	059b      	lsls	r3, r3, #22
 800168e:	d4dd      	bmi.n	800164c <_fflush_r+0xc>
 8001690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001692:	f7ff fad0 	bl	8000c36 <__retarget_lock_release_recursive>
 8001696:	e7d9      	b.n	800164c <_fflush_r+0xc>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_fflush_r+0x70>)
 800169a:	429c      	cmp	r4, r3
 800169c:	d101      	bne.n	80016a2 <_fflush_r+0x62>
 800169e:	68ac      	ldr	r4, [r5, #8]
 80016a0:	e7df      	b.n	8001662 <_fflush_r+0x22>
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <_fflush_r+0x74>)
 80016a4:	429c      	cmp	r4, r3
 80016a6:	bf08      	it	eq
 80016a8:	68ec      	ldreq	r4, [r5, #12]
 80016aa:	e7da      	b.n	8001662 <_fflush_r+0x22>
 80016ac:	08001940 	.word	0x08001940
 80016b0:	08001960 	.word	0x08001960
 80016b4:	08001920 	.word	0x08001920

080016b8 <_lseek_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d07      	ldr	r5, [pc, #28]	; (80016d8 <_lseek_r+0x20>)
 80016bc:	4604      	mov	r4, r0
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f7ff f822 	bl	8000710 <_lseek>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_lseek_r+0x1e>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_lseek_r+0x1e>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	2000009c 	.word	0x2000009c

080016dc <__swhatbuf_r>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	460e      	mov	r6, r1
 80016e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e4:	2900      	cmp	r1, #0
 80016e6:	b096      	sub	sp, #88	; 0x58
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	da07      	bge.n	80016fe <__swhatbuf_r+0x22>
 80016ee:	2300      	movs	r3, #0
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	89b3      	ldrh	r3, [r6, #12]
 80016f4:	061a      	lsls	r2, r3, #24
 80016f6:	d410      	bmi.n	800171a <__swhatbuf_r+0x3e>
 80016f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fc:	e00e      	b.n	800171c <__swhatbuf_r+0x40>
 80016fe:	466a      	mov	r2, sp
 8001700:	f000 f8be 	bl	8001880 <_fstat_r>
 8001704:	2800      	cmp	r0, #0
 8001706:	dbf2      	blt.n	80016ee <__swhatbuf_r+0x12>
 8001708:	9a01      	ldr	r2, [sp, #4]
 800170a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800170e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001712:	425a      	negs	r2, r3
 8001714:	415a      	adcs	r2, r3
 8001716:	602a      	str	r2, [r5, #0]
 8001718:	e7ee      	b.n	80016f8 <__swhatbuf_r+0x1c>
 800171a:	2340      	movs	r3, #64	; 0x40
 800171c:	2000      	movs	r0, #0
 800171e:	6023      	str	r3, [r4, #0]
 8001720:	b016      	add	sp, #88	; 0x58
 8001722:	bd70      	pop	{r4, r5, r6, pc}

08001724 <__smakebuf_r>:
 8001724:	898b      	ldrh	r3, [r1, #12]
 8001726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001728:	079d      	lsls	r5, r3, #30
 800172a:	4606      	mov	r6, r0
 800172c:	460c      	mov	r4, r1
 800172e:	d507      	bpl.n	8001740 <__smakebuf_r+0x1c>
 8001730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	6123      	str	r3, [r4, #16]
 8001738:	2301      	movs	r3, #1
 800173a:	6163      	str	r3, [r4, #20]
 800173c:	b002      	add	sp, #8
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	ab01      	add	r3, sp, #4
 8001742:	466a      	mov	r2, sp
 8001744:	f7ff ffca 	bl	80016dc <__swhatbuf_r>
 8001748:	9900      	ldr	r1, [sp, #0]
 800174a:	4605      	mov	r5, r0
 800174c:	4630      	mov	r0, r6
 800174e:	f7ff fa73 	bl	8000c38 <_malloc_r>
 8001752:	b948      	cbnz	r0, 8001768 <__smakebuf_r+0x44>
 8001754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001758:	059a      	lsls	r2, r3, #22
 800175a:	d4ef      	bmi.n	800173c <__smakebuf_r+0x18>
 800175c:	f023 0303 	bic.w	r3, r3, #3
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	81a3      	strh	r3, [r4, #12]
 8001766:	e7e3      	b.n	8001730 <__smakebuf_r+0xc>
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <__smakebuf_r+0x7c>)
 800176a:	62b3      	str	r3, [r6, #40]	; 0x28
 800176c:	89a3      	ldrh	r3, [r4, #12]
 800176e:	6020      	str	r0, [r4, #0]
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	81a3      	strh	r3, [r4, #12]
 8001776:	9b00      	ldr	r3, [sp, #0]
 8001778:	6163      	str	r3, [r4, #20]
 800177a:	9b01      	ldr	r3, [sp, #4]
 800177c:	6120      	str	r0, [r4, #16]
 800177e:	b15b      	cbz	r3, 8001798 <__smakebuf_r+0x74>
 8001780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001784:	4630      	mov	r0, r6
 8001786:	f000 f88d 	bl	80018a4 <_isatty_r>
 800178a:	b128      	cbz	r0, 8001798 <__smakebuf_r+0x74>
 800178c:	89a3      	ldrh	r3, [r4, #12]
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	81a3      	strh	r3, [r4, #12]
 8001798:	89a0      	ldrh	r0, [r4, #12]
 800179a:	4305      	orrs	r5, r0
 800179c:	81a5      	strh	r5, [r4, #12]
 800179e:	e7cd      	b.n	800173c <__smakebuf_r+0x18>
 80017a0:	08000a91 	.word	0x08000a91

080017a4 <__malloc_lock>:
 80017a4:	4801      	ldr	r0, [pc, #4]	; (80017ac <__malloc_lock+0x8>)
 80017a6:	f7ff ba45 	b.w	8000c34 <__retarget_lock_acquire_recursive>
 80017aa:	bf00      	nop
 80017ac:	20000094 	.word	0x20000094

080017b0 <__malloc_unlock>:
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <__malloc_unlock+0x8>)
 80017b2:	f7ff ba40 	b.w	8000c36 <__retarget_lock_release_recursive>
 80017b6:	bf00      	nop
 80017b8:	20000094 	.word	0x20000094

080017bc <_free_r>:
 80017bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017be:	2900      	cmp	r1, #0
 80017c0:	d048      	beq.n	8001854 <_free_r+0x98>
 80017c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017c6:	9001      	str	r0, [sp, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f1a1 0404 	sub.w	r4, r1, #4
 80017ce:	bfb8      	it	lt
 80017d0:	18e4      	addlt	r4, r4, r3
 80017d2:	f7ff ffe7 	bl	80017a4 <__malloc_lock>
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <_free_r+0x9c>)
 80017d8:	9801      	ldr	r0, [sp, #4]
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	4615      	mov	r5, r2
 80017de:	b933      	cbnz	r3, 80017ee <_free_r+0x32>
 80017e0:	6063      	str	r3, [r4, #4]
 80017e2:	6014      	str	r4, [r2, #0]
 80017e4:	b003      	add	sp, #12
 80017e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017ea:	f7ff bfe1 	b.w	80017b0 <__malloc_unlock>
 80017ee:	42a3      	cmp	r3, r4
 80017f0:	d90b      	bls.n	800180a <_free_r+0x4e>
 80017f2:	6821      	ldr	r1, [r4, #0]
 80017f4:	1862      	adds	r2, r4, r1
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bf04      	itt	eq
 80017fa:	681a      	ldreq	r2, [r3, #0]
 80017fc:	685b      	ldreq	r3, [r3, #4]
 80017fe:	6063      	str	r3, [r4, #4]
 8001800:	bf04      	itt	eq
 8001802:	1852      	addeq	r2, r2, r1
 8001804:	6022      	streq	r2, [r4, #0]
 8001806:	602c      	str	r4, [r5, #0]
 8001808:	e7ec      	b.n	80017e4 <_free_r+0x28>
 800180a:	461a      	mov	r2, r3
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b10b      	cbz	r3, 8001814 <_free_r+0x58>
 8001810:	42a3      	cmp	r3, r4
 8001812:	d9fa      	bls.n	800180a <_free_r+0x4e>
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	1855      	adds	r5, r2, r1
 8001818:	42a5      	cmp	r5, r4
 800181a:	d10b      	bne.n	8001834 <_free_r+0x78>
 800181c:	6824      	ldr	r4, [r4, #0]
 800181e:	4421      	add	r1, r4
 8001820:	1854      	adds	r4, r2, r1
 8001822:	42a3      	cmp	r3, r4
 8001824:	6011      	str	r1, [r2, #0]
 8001826:	d1dd      	bne.n	80017e4 <_free_r+0x28>
 8001828:	681c      	ldr	r4, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	6053      	str	r3, [r2, #4]
 800182e:	4421      	add	r1, r4
 8001830:	6011      	str	r1, [r2, #0]
 8001832:	e7d7      	b.n	80017e4 <_free_r+0x28>
 8001834:	d902      	bls.n	800183c <_free_r+0x80>
 8001836:	230c      	movs	r3, #12
 8001838:	6003      	str	r3, [r0, #0]
 800183a:	e7d3      	b.n	80017e4 <_free_r+0x28>
 800183c:	6825      	ldr	r5, [r4, #0]
 800183e:	1961      	adds	r1, r4, r5
 8001840:	428b      	cmp	r3, r1
 8001842:	bf04      	itt	eq
 8001844:	6819      	ldreq	r1, [r3, #0]
 8001846:	685b      	ldreq	r3, [r3, #4]
 8001848:	6063      	str	r3, [r4, #4]
 800184a:	bf04      	itt	eq
 800184c:	1949      	addeq	r1, r1, r5
 800184e:	6021      	streq	r1, [r4, #0]
 8001850:	6054      	str	r4, [r2, #4]
 8001852:	e7c7      	b.n	80017e4 <_free_r+0x28>
 8001854:	b003      	add	sp, #12
 8001856:	bd30      	pop	{r4, r5, pc}
 8001858:	20000088 	.word	0x20000088

0800185c <_read_r>:
 800185c:	b538      	push	{r3, r4, r5, lr}
 800185e:	4d07      	ldr	r5, [pc, #28]	; (800187c <_read_r+0x20>)
 8001860:	4604      	mov	r4, r0
 8001862:	4608      	mov	r0, r1
 8001864:	4611      	mov	r1, r2
 8001866:	2200      	movs	r2, #0
 8001868:	602a      	str	r2, [r5, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	f7fe fef0 	bl	8000650 <_read>
 8001870:	1c43      	adds	r3, r0, #1
 8001872:	d102      	bne.n	800187a <_read_r+0x1e>
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	b103      	cbz	r3, 800187a <_read_r+0x1e>
 8001878:	6023      	str	r3, [r4, #0]
 800187a:	bd38      	pop	{r3, r4, r5, pc}
 800187c:	2000009c 	.word	0x2000009c

08001880 <_fstat_r>:
 8001880:	b538      	push	{r3, r4, r5, lr}
 8001882:	4d07      	ldr	r5, [pc, #28]	; (80018a0 <_fstat_r+0x20>)
 8001884:	2300      	movs	r3, #0
 8001886:	4604      	mov	r4, r0
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	602b      	str	r3, [r5, #0]
 800188e:	f7fe ff24 	bl	80006da <_fstat>
 8001892:	1c43      	adds	r3, r0, #1
 8001894:	d102      	bne.n	800189c <_fstat_r+0x1c>
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	b103      	cbz	r3, 800189c <_fstat_r+0x1c>
 800189a:	6023      	str	r3, [r4, #0]
 800189c:	bd38      	pop	{r3, r4, r5, pc}
 800189e:	bf00      	nop
 80018a0:	2000009c 	.word	0x2000009c

080018a4 <_isatty_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	4d06      	ldr	r5, [pc, #24]	; (80018c0 <_isatty_r+0x1c>)
 80018a8:	2300      	movs	r3, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	602b      	str	r3, [r5, #0]
 80018b0:	f7fe ff23 	bl	80006fa <_isatty>
 80018b4:	1c43      	adds	r3, r0, #1
 80018b6:	d102      	bne.n	80018be <_isatty_r+0x1a>
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	b103      	cbz	r3, 80018be <_isatty_r+0x1a>
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	2000009c 	.word	0x2000009c

080018c4 <_init>:
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c6:	bf00      	nop
 80018c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ca:	bc08      	pop	{r3}
 80018cc:	469e      	mov	lr, r3
 80018ce:	4770      	bx	lr

080018d0 <_fini>:
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	bf00      	nop
 80018d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d6:	bc08      	pop	{r3}
 80018d8:	469e      	mov	lr, r3
 80018da:	4770      	bx	lr

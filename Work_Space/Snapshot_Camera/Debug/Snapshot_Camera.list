
Snapshot_Camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001528  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080016f8  080016f8  000116f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  0800183c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800183c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036ca  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a27  00000000  00000000  0002375e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00024188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00024348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad0b  00000000  00000000  000244a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002543  00000000  00000000  0003f1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cc3  00000000  00000000  000416ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d23b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf0  00000000  00000000  000d2404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016e0 	.word	0x080016e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080016e0 	.word	0x080016e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <gpiob_switch_init>:
#define GPIOBEN		(1U<<1)


/*Function used for initialing GPIOB pins for external switches*/
void gpiob_switch_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Enable clock access for GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <gpiob_switch_init+0x4c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <gpiob_switch_init+0x4c>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB4, PB5, PB14, and PB15 as inputs*/
	GPIOB->MODER &= ~(3U<<8);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <gpiob_switch_init+0x50>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <gpiob_switch_init+0x50>)
 80002c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<10);
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <gpiob_switch_init+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <gpiob_switch_init+0x50>)
 80002d2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<28);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <gpiob_switch_init+0x50>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a08      	ldr	r2, [pc, #32]	; (8000300 <gpiob_switch_init+0x50>)
 80002de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<30);
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <gpiob_switch_init+0x50>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <gpiob_switch_init+0x50>)
 80002ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80002ee:	6013      	str	r3, [r2, #0]

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400

08000304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	db0b      	blt.n	800032e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f003 021f 	and.w	r2, r3, #31
 800031c:	4907      	ldr	r1, [pc, #28]	; (800033c <__NVIC_EnableIRQ+0x38>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	095b      	lsrs	r3, r3, #5
 8000324:	2001      	movs	r0, #1
 8000326:	fa00 f202 	lsl.w	r2, r0, r2
 800032a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100

08000340 <pbpins_exti_init>:
#define GPIOBEN			(1U<<1)
#define SYSCFGEN		(1U<<14)


void pbpins_exti_init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable block access for GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8000348:	4b42      	ldr	r3, [pc, #264]	; (8000454 <pbpins_exti_init+0x114>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a41      	ldr	r2, [pc, #260]	; (8000454 <pbpins_exti_init+0x114>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB4, PB5, PB14, PB15 as input*/
	GPIOB->MODER &= ~(3U<<8);
 8000354:	4b40      	ldr	r3, [pc, #256]	; (8000458 <pbpins_exti_init+0x118>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <pbpins_exti_init+0x118>)
 800035a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800035e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<10);
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <pbpins_exti_init+0x118>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <pbpins_exti_init+0x118>)
 8000366:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800036a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<28);
 800036c:	4b3a      	ldr	r3, [pc, #232]	; (8000458 <pbpins_exti_init+0x118>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a39      	ldr	r2, [pc, #228]	; (8000458 <pbpins_exti_init+0x118>)
 8000372:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(3U<<30);
 8000378:	4b37      	ldr	r3, [pc, #220]	; (8000458 <pbpins_exti_init+0x118>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a36      	ldr	r2, [pc, #216]	; (8000458 <pbpins_exti_init+0x118>)
 800037e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000382:	6013      	str	r3, [r2, #0]

	/*Enable clock access to SYSCFG (I need to do more research on what this is)*/
	RCC->APB2ENR |= SYSCFGEN;
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <pbpins_exti_init+0x114>)
 8000386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000388:	4a32      	ldr	r2, [pc, #200]	; (8000454 <pbpins_exti_init+0x114>)
 800038a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTB for EXTI4*/
	SYSCFG->EXTICR[1] |= (1U<<0);
 8000390:	4b32      	ldr	r3, [pc, #200]	; (800045c <pbpins_exti_init+0x11c>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <pbpins_exti_init+0x11c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	60d3      	str	r3, [r2, #12]

	/*Select PORTB for EXTI5*/
	SYSCFG->EXTICR[1] |= (1U<<4);
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <pbpins_exti_init+0x11c>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a2e      	ldr	r2, [pc, #184]	; (800045c <pbpins_exti_init+0x11c>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	60d3      	str	r3, [r2, #12]

	/*Select PORTB for EXTI14*/
	SYSCFG->EXTICR[3] |= (1U<<8);
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <pbpins_exti_init+0x11c>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a2b      	ldr	r2, [pc, #172]	; (800045c <pbpins_exti_init+0x11c>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b2:	6153      	str	r3, [r2, #20]

	/*Select PORTB for EXTI15*/
	SYSCFG->EXTICR[3] |= (1U<<12);
 80003b4:	4b29      	ldr	r3, [pc, #164]	; (800045c <pbpins_exti_init+0x11c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a28      	ldr	r2, [pc, #160]	; (800045c <pbpins_exti_init+0x11c>)
 80003ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003be:	6153      	str	r3, [r2, #20]

	/*Unmask EXTI4*/
	EXTI->IMR |= (1U<<4);
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <pbpins_exti_init+0x120>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <pbpins_exti_init+0x120>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI5*/
	EXTI->IMR |= (1U<<5);
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <pbpins_exti_init+0x120>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a23      	ldr	r2, [pc, #140]	; (8000460 <pbpins_exti_init+0x120>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI14*/
	EXTI->IMR |= (1U<<14);
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <pbpins_exti_init+0x120>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a20      	ldr	r2, [pc, #128]	; (8000460 <pbpins_exti_init+0x120>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	6013      	str	r3, [r2, #0]

	/*Unmask EXTI15*/
	EXTI->IMR |= (1U<<15);
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <pbpins_exti_init+0x120>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <pbpins_exti_init+0x120>)
 80003ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003ee:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger for 4, 5, 14, and 15*/
	EXTI->FTSR |= (1U<<4);
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <pbpins_exti_init+0x120>)
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	4a1a      	ldr	r2, [pc, #104]	; (8000460 <pbpins_exti_init+0x120>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<5);
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <pbpins_exti_init+0x120>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a17      	ldr	r2, [pc, #92]	; (8000460 <pbpins_exti_init+0x120>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<14);
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <pbpins_exti_init+0x120>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <pbpins_exti_init+0x120>)
 800040e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000412:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= (1U<<15);
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <pbpins_exti_init+0x120>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a11      	ldr	r2, [pc, #68]	; (8000460 <pbpins_exti_init+0x120>)
 800041a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800041e:	60d3      	str	r3, [r2, #12]

	/*Set EXTI4, EXTI5, EXTI14, and EXTI15 priority to 1*/
	NVIC->IP[EXTI4_IRQn] = (1 << 4);
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <pbpins_exti_init+0x124>)
 8000422:	2210      	movs	r2, #16
 8000424:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC->IP[EXTI9_5_IRQn] = (1 << 4);
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <pbpins_exti_init+0x124>)
 800042a:	2210      	movs	r2, #16
 800042c:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
	NVIC->IP[EXTI15_10_IRQn] = (1 << 4);
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <pbpins_exti_init+0x124>)
 8000432:	2210      	movs	r2, #16
 8000434:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

	/*Enable EXTI4, EXTI5, EXTI14, and EXTI15 line in NVIC*/
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000438:	200a      	movs	r0, #10
 800043a:	f7ff ff63 	bl	8000304 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800043e:	2017      	movs	r0, #23
 8000440:	f7ff ff60 	bl	8000304 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000444:	2028      	movs	r0, #40	; 0x28
 8000446:	f7ff ff5d 	bl	8000304 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800044a:	b662      	cpsie	i
}
 800044c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40023800 	.word	0x40023800
 8000458:	40020400 	.word	0x40020400
 800045c:	40013800 	.word	0x40013800
 8000460:	40013c00 	.word	0x40013c00
 8000464:	e000e100 	.word	0xe000e100

08000468 <main>:
int td_switch = 0;
int tu_switch = 0;


int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	gpiob_switch_init();
 800046c:	f7ff ff20 	bl	80002b0 <gpiob_switch_init>
	pbpins_exti_init();
 8000470:	f7ff ff66 	bl	8000340 <pbpins_exti_init>
	usart2_tx_init();
 8000474:	f000 f904 	bl	8000680 <usart2_tx_init>

	while(1){
 8000478:	e7fe      	b.n	8000478 <main+0x10>
	...

0800047c <EXTI4_IRQHandler>:
	}
}


void EXTI4_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	/*Clear PR flag*/
	EXTI->PR |= LINE4;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI4_IRQHandler+0x1c>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <EXTI4_IRQHandler+0x1c>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6153      	str	r3, [r2, #20]

	//Do something...
	printf("Pan Left...\n\r");
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <EXTI4_IRQHandler+0x20>)
 800048e:	f000 f9d1 	bl	8000834 <iprintf>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40013c00 	.word	0x40013c00
 800049c:	080016f8 	.word	0x080016f8

080004a0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE5) != 0){
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <EXTI9_5_IRQHandler+0x28>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI9_5_IRQHandler+0x22>
		/*Clear PR flag*/
		EXTI->PR |= LINE5;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI9_5_IRQHandler+0x28>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <EXTI9_5_IRQHandler+0x28>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6153      	str	r3, [r2, #20]

		//Do something...
		printf("Pan Right...\n\r");
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <EXTI9_5_IRQHandler+0x2c>)
 80004be:	f000 f9b9 	bl	8000834 <iprintf>
	}
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40013c00 	.word	0x40013c00
 80004cc:	08001708 	.word	0x08001708

080004d0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE14) != 0){
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <EXTI15_10_IRQHandler+0x22>
		/*Clear PR flag*/
		EXTI->PR |= LINE14;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 80004e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ea:	6153      	str	r3, [r2, #20]

		//Do something...
		printf("Tilt Down...\n\r");
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <EXTI15_10_IRQHandler+0x48>)
 80004ee:	f000 f9a1 	bl	8000834 <iprintf>
	}

	if((EXTI->PR & LINE15) != 0){
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d008      	beq.n	8000510 <EXTI15_10_IRQHandler+0x40>
		/*Clear PR flag*/
		EXTI->PR |= LINE15;
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <EXTI15_10_IRQHandler+0x44>)
 8000504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000508:	6153      	str	r3, [r2, #20]

		//Do something...
		printf("Tilt Up...\n\r");
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <EXTI15_10_IRQHandler+0x4c>)
 800050c:	f000 f992 	bl	8000834 <iprintf>
	}
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40013c00 	.word	0x40013c00
 8000518:	08001718 	.word	0x08001718
 800051c:	08001728 	.word	0x08001728

08000520 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	e00a      	b.n	8000548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000532:	f3af 8000 	nop.w
 8000536:	4601      	mov	r1, r0
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	b2ca      	uxtb	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf0      	blt.n	8000532 <_read+0x12>
	}

return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e009      	b.n	8000580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60ba      	str	r2, [r7, #8]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f877 	bl	8000668 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	dbf1      	blt.n	800056c <_write+0x12>
	}
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_close>:

int _close(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ba:	605a      	str	r2, [r3, #4]
	return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_isatty>:

int _isatty(int file)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
	return 1;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f000 f8d0 	bl	80007d0 <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20020000 	.word	0x20020000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000080 	.word	0x20000080
 8000664:	200000a0 	.word	0x200000a0

08000668 <__io_putchar>:


//void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f845 	bl	8000700 <uart2_write>
	return ch;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <usart2_tx_init>:

void usart2_tx_init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	/*******Configure uart GPIO pin*******/
	/*Enable clock access to gpioa*/
	RCC->AHB1ENR |= GPIOAEN;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <usart2_tx_init+0x70>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <usart2_tx_init+0x70>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &= ~(1U<<4);
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <usart2_tx_init+0x74>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <usart2_tx_init+0x74>)
 8000696:	f023 0310 	bic.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <usart2_tx_init+0x74>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <usart2_tx_init+0x74>)
 80006a2:	f043 0320 	orr.w	r3, r3, #32
 80006a6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[0] &= ~(0xF<<8);
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <usart2_tx_init+0x74>)
 80006aa:	6a1b      	ldr	r3, [r3, #32]
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <usart2_tx_init+0x74>)
 80006ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7U<<8);
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <usart2_tx_init+0x74>)
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <usart2_tx_init+0x74>)
 80006ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80006be:	6213      	str	r3, [r2, #32]

	/*******Configure uart module*******/
	/*Enable clock access to uart2*/
	RCC->APB1ENR |= USART2EN;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <usart2_tx_init+0x70>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <usart2_tx_init+0x70>)
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	4909      	ldr	r1, [pc, #36]	; (80006f8 <usart2_tx_init+0x78>)
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <usart2_tx_init+0x7c>)
 80006d4:	f000 f82c 	bl	8000730 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE; //Set to CR1_TE on purpose. Basically Setting everything else to zero
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <usart2_tx_init+0x7c>)
 80006da:	2208      	movs	r2, #8
 80006dc:	60da      	str	r2, [r3, #12]
						  //is good for standard UART configuration.

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;//Now just add 1 to UE bit otherwise mess with previous settings
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <usart2_tx_init+0x7c>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <usart2_tx_init+0x7c>)
 80006e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006e8:	60d3      	str	r3, [r2, #12]

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	00f42400 	.word	0x00f42400
 80006fc:	40004400 	.word	0x40004400

08000700 <uart2_write>:
	/*Read data*/
	return USART2->DR;
}

void uart2_write(int ch)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty. While its not empty stay in while*/
	/*The data register still has data in it that it needs to send*/
	while(!(USART2->SR & SR_TXE)){}
 8000708:	bf00      	nop
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <uart2_write+0x2c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <uart2_write+0x2c>)
 800071a:	b2db      	uxtb	r3, r3
 800071c:	6053      	str	r3, [r2, #4]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40004400 	.word	0x40004400

08000730 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	68b8      	ldr	r0, [r7, #8]
 8000740:	f000 f808 	bl	8000754 <compute_uart_bd>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	609a      	str	r2, [r3, #8]
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	085a      	lsrs	r2, r3, #1
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	441a      	add	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	b29b      	uxth	r3, r3
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000780:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007aa:	f000 f817 	bl	80007dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ae:	f7ff fe5b 	bl	8000468 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   r0, =_estack
 80007b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007c0:	080017d8 	.word	0x080017d8
  ldr r2, =_sbss
 80007c4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007c8:	2000009c 	.word	0x2000009c

080007cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC_IRQHandler>
	...

080007d0 <__errno>:
 80007d0:	4b01      	ldr	r3, [pc, #4]	; (80007d8 <__errno+0x8>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <__libc_init_array>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	4d0d      	ldr	r5, [pc, #52]	; (8000814 <__libc_init_array+0x38>)
 80007e0:	4c0d      	ldr	r4, [pc, #52]	; (8000818 <__libc_init_array+0x3c>)
 80007e2:	1b64      	subs	r4, r4, r5
 80007e4:	10a4      	asrs	r4, r4, #2
 80007e6:	2600      	movs	r6, #0
 80007e8:	42a6      	cmp	r6, r4
 80007ea:	d109      	bne.n	8000800 <__libc_init_array+0x24>
 80007ec:	4d0b      	ldr	r5, [pc, #44]	; (800081c <__libc_init_array+0x40>)
 80007ee:	4c0c      	ldr	r4, [pc, #48]	; (8000820 <__libc_init_array+0x44>)
 80007f0:	f000 ff76 	bl	80016e0 <_init>
 80007f4:	1b64      	subs	r4, r4, r5
 80007f6:	10a4      	asrs	r4, r4, #2
 80007f8:	2600      	movs	r6, #0
 80007fa:	42a6      	cmp	r6, r4
 80007fc:	d105      	bne.n	800080a <__libc_init_array+0x2e>
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f855 3b04 	ldr.w	r3, [r5], #4
 8000804:	4798      	blx	r3
 8000806:	3601      	adds	r6, #1
 8000808:	e7ee      	b.n	80007e8 <__libc_init_array+0xc>
 800080a:	f855 3b04 	ldr.w	r3, [r5], #4
 800080e:	4798      	blx	r3
 8000810:	3601      	adds	r6, #1
 8000812:	e7f2      	b.n	80007fa <__libc_init_array+0x1e>
 8000814:	080017d0 	.word	0x080017d0
 8000818:	080017d0 	.word	0x080017d0
 800081c:	080017d0 	.word	0x080017d0
 8000820:	080017d4 	.word	0x080017d4

08000824 <memset>:
 8000824:	4402      	add	r2, r0
 8000826:	4603      	mov	r3, r0
 8000828:	4293      	cmp	r3, r2
 800082a:	d100      	bne.n	800082e <memset+0xa>
 800082c:	4770      	bx	lr
 800082e:	f803 1b01 	strb.w	r1, [r3], #1
 8000832:	e7f9      	b.n	8000828 <memset+0x4>

08000834 <iprintf>:
 8000834:	b40f      	push	{r0, r1, r2, r3}
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <iprintf+0x2c>)
 8000838:	b513      	push	{r0, r1, r4, lr}
 800083a:	681c      	ldr	r4, [r3, #0]
 800083c:	b124      	cbz	r4, 8000848 <iprintf+0x14>
 800083e:	69a3      	ldr	r3, [r4, #24]
 8000840:	b913      	cbnz	r3, 8000848 <iprintf+0x14>
 8000842:	4620      	mov	r0, r4
 8000844:	f000 f866 	bl	8000914 <__sinit>
 8000848:	ab05      	add	r3, sp, #20
 800084a:	9a04      	ldr	r2, [sp, #16]
 800084c:	68a1      	ldr	r1, [r4, #8]
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	4620      	mov	r0, r4
 8000852:	f000 f983 	bl	8000b5c <_vfiprintf_r>
 8000856:	b002      	add	sp, #8
 8000858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800085c:	b004      	add	sp, #16
 800085e:	4770      	bx	lr
 8000860:	20000000 	.word	0x20000000

08000864 <std>:
 8000864:	2300      	movs	r3, #0
 8000866:	b510      	push	{r4, lr}
 8000868:	4604      	mov	r4, r0
 800086a:	e9c0 3300 	strd	r3, r3, [r0]
 800086e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000872:	6083      	str	r3, [r0, #8]
 8000874:	8181      	strh	r1, [r0, #12]
 8000876:	6643      	str	r3, [r0, #100]	; 0x64
 8000878:	81c2      	strh	r2, [r0, #14]
 800087a:	6183      	str	r3, [r0, #24]
 800087c:	4619      	mov	r1, r3
 800087e:	2208      	movs	r2, #8
 8000880:	305c      	adds	r0, #92	; 0x5c
 8000882:	f7ff ffcf 	bl	8000824 <memset>
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <std+0x38>)
 8000888:	6263      	str	r3, [r4, #36]	; 0x24
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <std+0x3c>)
 800088c:	62a3      	str	r3, [r4, #40]	; 0x28
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x40>)
 8000890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <std+0x44>)
 8000894:	6224      	str	r4, [r4, #32]
 8000896:	6323      	str	r3, [r4, #48]	; 0x30
 8000898:	bd10      	pop	{r4, pc}
 800089a:	bf00      	nop
 800089c:	08001105 	.word	0x08001105
 80008a0:	08001127 	.word	0x08001127
 80008a4:	0800115f 	.word	0x0800115f
 80008a8:	08001183 	.word	0x08001183

080008ac <_cleanup_r>:
 80008ac:	4901      	ldr	r1, [pc, #4]	; (80008b4 <_cleanup_r+0x8>)
 80008ae:	f000 b8af 	b.w	8000a10 <_fwalk_reent>
 80008b2:	bf00      	nop
 80008b4:	0800145d 	.word	0x0800145d

080008b8 <__sfmoreglue>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	1e4a      	subs	r2, r1, #1
 80008bc:	2568      	movs	r5, #104	; 0x68
 80008be:	4355      	muls	r5, r2
 80008c0:	460e      	mov	r6, r1
 80008c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008c6:	f000 f8c5 	bl	8000a54 <_malloc_r>
 80008ca:	4604      	mov	r4, r0
 80008cc:	b140      	cbz	r0, 80008e0 <__sfmoreglue+0x28>
 80008ce:	2100      	movs	r1, #0
 80008d0:	e9c0 1600 	strd	r1, r6, [r0]
 80008d4:	300c      	adds	r0, #12
 80008d6:	60a0      	str	r0, [r4, #8]
 80008d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008dc:	f7ff ffa2 	bl	8000824 <memset>
 80008e0:	4620      	mov	r0, r4
 80008e2:	bd70      	pop	{r4, r5, r6, pc}

080008e4 <__sfp_lock_acquire>:
 80008e4:	4801      	ldr	r0, [pc, #4]	; (80008ec <__sfp_lock_acquire+0x8>)
 80008e6:	f000 b8b3 	b.w	8000a50 <__retarget_lock_acquire_recursive>
 80008ea:	bf00      	nop
 80008ec:	20000094 	.word	0x20000094

080008f0 <__sfp_lock_release>:
 80008f0:	4801      	ldr	r0, [pc, #4]	; (80008f8 <__sfp_lock_release+0x8>)
 80008f2:	f000 b8ae 	b.w	8000a52 <__retarget_lock_release_recursive>
 80008f6:	bf00      	nop
 80008f8:	20000094 	.word	0x20000094

080008fc <__sinit_lock_acquire>:
 80008fc:	4801      	ldr	r0, [pc, #4]	; (8000904 <__sinit_lock_acquire+0x8>)
 80008fe:	f000 b8a7 	b.w	8000a50 <__retarget_lock_acquire_recursive>
 8000902:	bf00      	nop
 8000904:	2000008f 	.word	0x2000008f

08000908 <__sinit_lock_release>:
 8000908:	4801      	ldr	r0, [pc, #4]	; (8000910 <__sinit_lock_release+0x8>)
 800090a:	f000 b8a2 	b.w	8000a52 <__retarget_lock_release_recursive>
 800090e:	bf00      	nop
 8000910:	2000008f 	.word	0x2000008f

08000914 <__sinit>:
 8000914:	b510      	push	{r4, lr}
 8000916:	4604      	mov	r4, r0
 8000918:	f7ff fff0 	bl	80008fc <__sinit_lock_acquire>
 800091c:	69a3      	ldr	r3, [r4, #24]
 800091e:	b11b      	cbz	r3, 8000928 <__sinit+0x14>
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000924:	f7ff bff0 	b.w	8000908 <__sinit_lock_release>
 8000928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800092c:	6523      	str	r3, [r4, #80]	; 0x50
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <__sinit+0x68>)
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <__sinit+0x6c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	62a2      	str	r2, [r4, #40]	; 0x28
 8000936:	42a3      	cmp	r3, r4
 8000938:	bf04      	itt	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	61a3      	streq	r3, [r4, #24]
 800093e:	4620      	mov	r0, r4
 8000940:	f000 f820 	bl	8000984 <__sfp>
 8000944:	6060      	str	r0, [r4, #4]
 8000946:	4620      	mov	r0, r4
 8000948:	f000 f81c 	bl	8000984 <__sfp>
 800094c:	60a0      	str	r0, [r4, #8]
 800094e:	4620      	mov	r0, r4
 8000950:	f000 f818 	bl	8000984 <__sfp>
 8000954:	2200      	movs	r2, #0
 8000956:	60e0      	str	r0, [r4, #12]
 8000958:	2104      	movs	r1, #4
 800095a:	6860      	ldr	r0, [r4, #4]
 800095c:	f7ff ff82 	bl	8000864 <std>
 8000960:	68a0      	ldr	r0, [r4, #8]
 8000962:	2201      	movs	r2, #1
 8000964:	2109      	movs	r1, #9
 8000966:	f7ff ff7d 	bl	8000864 <std>
 800096a:	68e0      	ldr	r0, [r4, #12]
 800096c:	2202      	movs	r2, #2
 800096e:	2112      	movs	r1, #18
 8000970:	f7ff ff78 	bl	8000864 <std>
 8000974:	2301      	movs	r3, #1
 8000976:	61a3      	str	r3, [r4, #24]
 8000978:	e7d2      	b.n	8000920 <__sinit+0xc>
 800097a:	bf00      	nop
 800097c:	08001738 	.word	0x08001738
 8000980:	080008ad 	.word	0x080008ad

08000984 <__sfp>:
 8000984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000986:	4607      	mov	r7, r0
 8000988:	f7ff ffac 	bl	80008e4 <__sfp_lock_acquire>
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <__sfp+0x84>)
 800098e:	681e      	ldr	r6, [r3, #0]
 8000990:	69b3      	ldr	r3, [r6, #24]
 8000992:	b913      	cbnz	r3, 800099a <__sfp+0x16>
 8000994:	4630      	mov	r0, r6
 8000996:	f7ff ffbd 	bl	8000914 <__sinit>
 800099a:	3648      	adds	r6, #72	; 0x48
 800099c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	d503      	bpl.n	80009ac <__sfp+0x28>
 80009a4:	6833      	ldr	r3, [r6, #0]
 80009a6:	b30b      	cbz	r3, 80009ec <__sfp+0x68>
 80009a8:	6836      	ldr	r6, [r6, #0]
 80009aa:	e7f7      	b.n	800099c <__sfp+0x18>
 80009ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009b0:	b9d5      	cbnz	r5, 80009e8 <__sfp+0x64>
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <__sfp+0x88>)
 80009b4:	60e3      	str	r3, [r4, #12]
 80009b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009ba:	6665      	str	r5, [r4, #100]	; 0x64
 80009bc:	f000 f847 	bl	8000a4e <__retarget_lock_init_recursive>
 80009c0:	f7ff ff96 	bl	80008f0 <__sfp_lock_release>
 80009c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009cc:	6025      	str	r5, [r4, #0]
 80009ce:	61a5      	str	r5, [r4, #24]
 80009d0:	2208      	movs	r2, #8
 80009d2:	4629      	mov	r1, r5
 80009d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009d8:	f7ff ff24 	bl	8000824 <memset>
 80009dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009e4:	4620      	mov	r0, r4
 80009e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e8:	3468      	adds	r4, #104	; 0x68
 80009ea:	e7d9      	b.n	80009a0 <__sfp+0x1c>
 80009ec:	2104      	movs	r1, #4
 80009ee:	4638      	mov	r0, r7
 80009f0:	f7ff ff62 	bl	80008b8 <__sfmoreglue>
 80009f4:	4604      	mov	r4, r0
 80009f6:	6030      	str	r0, [r6, #0]
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d1d5      	bne.n	80009a8 <__sfp+0x24>
 80009fc:	f7ff ff78 	bl	80008f0 <__sfp_lock_release>
 8000a00:	230c      	movs	r3, #12
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	e7ee      	b.n	80009e4 <__sfp+0x60>
 8000a06:	bf00      	nop
 8000a08:	08001738 	.word	0x08001738
 8000a0c:	ffff0001 	.word	0xffff0001

08000a10 <_fwalk_reent>:
 8000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a14:	4606      	mov	r6, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a1c:	2700      	movs	r7, #0
 8000a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a22:	f1b9 0901 	subs.w	r9, r9, #1
 8000a26:	d505      	bpl.n	8000a34 <_fwalk_reent+0x24>
 8000a28:	6824      	ldr	r4, [r4, #0]
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d1f7      	bne.n	8000a1e <_fwalk_reent+0xe>
 8000a2e:	4638      	mov	r0, r7
 8000a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a34:	89ab      	ldrh	r3, [r5, #12]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d907      	bls.n	8000a4a <_fwalk_reent+0x3a>
 8000a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	d003      	beq.n	8000a4a <_fwalk_reent+0x3a>
 8000a42:	4629      	mov	r1, r5
 8000a44:	4630      	mov	r0, r6
 8000a46:	47c0      	blx	r8
 8000a48:	4307      	orrs	r7, r0
 8000a4a:	3568      	adds	r5, #104	; 0x68
 8000a4c:	e7e9      	b.n	8000a22 <_fwalk_reent+0x12>

08000a4e <__retarget_lock_init_recursive>:
 8000a4e:	4770      	bx	lr

08000a50 <__retarget_lock_acquire_recursive>:
 8000a50:	4770      	bx	lr

08000a52 <__retarget_lock_release_recursive>:
 8000a52:	4770      	bx	lr

08000a54 <_malloc_r>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	1ccd      	adds	r5, r1, #3
 8000a58:	f025 0503 	bic.w	r5, r5, #3
 8000a5c:	3508      	adds	r5, #8
 8000a5e:	2d0c      	cmp	r5, #12
 8000a60:	bf38      	it	cc
 8000a62:	250c      	movcc	r5, #12
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	4606      	mov	r6, r0
 8000a68:	db01      	blt.n	8000a6e <_malloc_r+0x1a>
 8000a6a:	42a9      	cmp	r1, r5
 8000a6c:	d903      	bls.n	8000a76 <_malloc_r+0x22>
 8000a6e:	230c      	movs	r3, #12
 8000a70:	6033      	str	r3, [r6, #0]
 8000a72:	2000      	movs	r0, #0
 8000a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a76:	f000 fda3 	bl	80015c0 <__malloc_lock>
 8000a7a:	4921      	ldr	r1, [pc, #132]	; (8000b00 <_malloc_r+0xac>)
 8000a7c:	680a      	ldr	r2, [r1, #0]
 8000a7e:	4614      	mov	r4, r2
 8000a80:	b99c      	cbnz	r4, 8000aaa <_malloc_r+0x56>
 8000a82:	4f20      	ldr	r7, [pc, #128]	; (8000b04 <_malloc_r+0xb0>)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b923      	cbnz	r3, 8000a92 <_malloc_r+0x3e>
 8000a88:	4621      	mov	r1, r4
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f000 fb2a 	bl	80010e4 <_sbrk_r>
 8000a90:	6038      	str	r0, [r7, #0]
 8000a92:	4629      	mov	r1, r5
 8000a94:	4630      	mov	r0, r6
 8000a96:	f000 fb25 	bl	80010e4 <_sbrk_r>
 8000a9a:	1c43      	adds	r3, r0, #1
 8000a9c:	d123      	bne.n	8000ae6 <_malloc_r+0x92>
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	6033      	str	r3, [r6, #0]
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	f000 fd92 	bl	80015cc <__malloc_unlock>
 8000aa8:	e7e3      	b.n	8000a72 <_malloc_r+0x1e>
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	1b5b      	subs	r3, r3, r5
 8000aae:	d417      	bmi.n	8000ae0 <_malloc_r+0x8c>
 8000ab0:	2b0b      	cmp	r3, #11
 8000ab2:	d903      	bls.n	8000abc <_malloc_r+0x68>
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	441c      	add	r4, r3
 8000ab8:	6025      	str	r5, [r4, #0]
 8000aba:	e004      	b.n	8000ac6 <_malloc_r+0x72>
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	42a2      	cmp	r2, r4
 8000ac0:	bf0c      	ite	eq
 8000ac2:	600b      	streq	r3, [r1, #0]
 8000ac4:	6053      	strne	r3, [r2, #4]
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f000 fd80 	bl	80015cc <__malloc_unlock>
 8000acc:	f104 000b 	add.w	r0, r4, #11
 8000ad0:	1d23      	adds	r3, r4, #4
 8000ad2:	f020 0007 	bic.w	r0, r0, #7
 8000ad6:	1ac2      	subs	r2, r0, r3
 8000ad8:	d0cc      	beq.n	8000a74 <_malloc_r+0x20>
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	50a3      	str	r3, [r4, r2]
 8000ade:	e7c9      	b.n	8000a74 <_malloc_r+0x20>
 8000ae0:	4622      	mov	r2, r4
 8000ae2:	6864      	ldr	r4, [r4, #4]
 8000ae4:	e7cc      	b.n	8000a80 <_malloc_r+0x2c>
 8000ae6:	1cc4      	adds	r4, r0, #3
 8000ae8:	f024 0403 	bic.w	r4, r4, #3
 8000aec:	42a0      	cmp	r0, r4
 8000aee:	d0e3      	beq.n	8000ab8 <_malloc_r+0x64>
 8000af0:	1a21      	subs	r1, r4, r0
 8000af2:	4630      	mov	r0, r6
 8000af4:	f000 faf6 	bl	80010e4 <_sbrk_r>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d1dd      	bne.n	8000ab8 <_malloc_r+0x64>
 8000afc:	e7cf      	b.n	8000a9e <_malloc_r+0x4a>
 8000afe:	bf00      	nop
 8000b00:	20000084 	.word	0x20000084
 8000b04:	20000088 	.word	0x20000088

08000b08 <__sfputc_r>:
 8000b08:	6893      	ldr	r3, [r2, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	b410      	push	{r4}
 8000b10:	6093      	str	r3, [r2, #8]
 8000b12:	da08      	bge.n	8000b26 <__sfputc_r+0x1e>
 8000b14:	6994      	ldr	r4, [r2, #24]
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	db01      	blt.n	8000b1e <__sfputc_r+0x16>
 8000b1a:	290a      	cmp	r1, #10
 8000b1c:	d103      	bne.n	8000b26 <__sfputc_r+0x1e>
 8000b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b22:	f000 bb33 	b.w	800118c <__swbuf_r>
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	1c58      	adds	r0, r3, #1
 8000b2a:	6010      	str	r0, [r2, #0]
 8000b2c:	7019      	strb	r1, [r3, #0]
 8000b2e:	4608      	mov	r0, r1
 8000b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <__sfputs_r>:
 8000b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b38:	4606      	mov	r6, r0
 8000b3a:	460f      	mov	r7, r1
 8000b3c:	4614      	mov	r4, r2
 8000b3e:	18d5      	adds	r5, r2, r3
 8000b40:	42ac      	cmp	r4, r5
 8000b42:	d101      	bne.n	8000b48 <__sfputs_r+0x12>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e007      	b.n	8000b58 <__sfputs_r+0x22>
 8000b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b4c:	463a      	mov	r2, r7
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f7ff ffda 	bl	8000b08 <__sfputc_r>
 8000b54:	1c43      	adds	r3, r0, #1
 8000b56:	d1f3      	bne.n	8000b40 <__sfputs_r+0xa>
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b5c <_vfiprintf_r>:
 8000b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b60:	460d      	mov	r5, r1
 8000b62:	b09d      	sub	sp, #116	; 0x74
 8000b64:	4614      	mov	r4, r2
 8000b66:	4698      	mov	r8, r3
 8000b68:	4606      	mov	r6, r0
 8000b6a:	b118      	cbz	r0, 8000b74 <_vfiprintf_r+0x18>
 8000b6c:	6983      	ldr	r3, [r0, #24]
 8000b6e:	b90b      	cbnz	r3, 8000b74 <_vfiprintf_r+0x18>
 8000b70:	f7ff fed0 	bl	8000914 <__sinit>
 8000b74:	4b89      	ldr	r3, [pc, #548]	; (8000d9c <_vfiprintf_r+0x240>)
 8000b76:	429d      	cmp	r5, r3
 8000b78:	d11b      	bne.n	8000bb2 <_vfiprintf_r+0x56>
 8000b7a:	6875      	ldr	r5, [r6, #4]
 8000b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7e:	07d9      	lsls	r1, r3, #31
 8000b80:	d405      	bmi.n	8000b8e <_vfiprintf_r+0x32>
 8000b82:	89ab      	ldrh	r3, [r5, #12]
 8000b84:	059a      	lsls	r2, r3, #22
 8000b86:	d402      	bmi.n	8000b8e <_vfiprintf_r+0x32>
 8000b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b8a:	f7ff ff61 	bl	8000a50 <__retarget_lock_acquire_recursive>
 8000b8e:	89ab      	ldrh	r3, [r5, #12]
 8000b90:	071b      	lsls	r3, r3, #28
 8000b92:	d501      	bpl.n	8000b98 <_vfiprintf_r+0x3c>
 8000b94:	692b      	ldr	r3, [r5, #16]
 8000b96:	b9eb      	cbnz	r3, 8000bd4 <_vfiprintf_r+0x78>
 8000b98:	4629      	mov	r1, r5
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	f000 fb5a 	bl	8001254 <__swsetup_r>
 8000ba0:	b1c0      	cbz	r0, 8000bd4 <_vfiprintf_r+0x78>
 8000ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba4:	07dc      	lsls	r4, r3, #31
 8000ba6:	d50e      	bpl.n	8000bc6 <_vfiprintf_r+0x6a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	b01d      	add	sp, #116	; 0x74
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bb2:	4b7b      	ldr	r3, [pc, #492]	; (8000da0 <_vfiprintf_r+0x244>)
 8000bb4:	429d      	cmp	r5, r3
 8000bb6:	d101      	bne.n	8000bbc <_vfiprintf_r+0x60>
 8000bb8:	68b5      	ldr	r5, [r6, #8]
 8000bba:	e7df      	b.n	8000b7c <_vfiprintf_r+0x20>
 8000bbc:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <_vfiprintf_r+0x248>)
 8000bbe:	429d      	cmp	r5, r3
 8000bc0:	bf08      	it	eq
 8000bc2:	68f5      	ldreq	r5, [r6, #12]
 8000bc4:	e7da      	b.n	8000b7c <_vfiprintf_r+0x20>
 8000bc6:	89ab      	ldrh	r3, [r5, #12]
 8000bc8:	0598      	lsls	r0, r3, #22
 8000bca:	d4ed      	bmi.n	8000ba8 <_vfiprintf_r+0x4c>
 8000bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bce:	f7ff ff40 	bl	8000a52 <__retarget_lock_release_recursive>
 8000bd2:	e7e9      	b.n	8000ba8 <_vfiprintf_r+0x4c>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd8:	2320      	movs	r3, #32
 8000bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8000be2:	2330      	movs	r3, #48	; 0x30
 8000be4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000da8 <_vfiprintf_r+0x24c>
 8000be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bec:	f04f 0901 	mov.w	r9, #1
 8000bf0:	4623      	mov	r3, r4
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf8:	b10a      	cbz	r2, 8000bfe <_vfiprintf_r+0xa2>
 8000bfa:	2a25      	cmp	r2, #37	; 0x25
 8000bfc:	d1f9      	bne.n	8000bf2 <_vfiprintf_r+0x96>
 8000bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8000c02:	d00b      	beq.n	8000c1c <_vfiprintf_r+0xc0>
 8000c04:	465b      	mov	r3, fp
 8000c06:	4622      	mov	r2, r4
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f7ff ff93 	bl	8000b36 <__sfputs_r>
 8000c10:	3001      	adds	r0, #1
 8000c12:	f000 80aa 	beq.w	8000d6a <_vfiprintf_r+0x20e>
 8000c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c18:	445a      	add	r2, fp
 8000c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80a2 	beq.w	8000d6a <_vfiprintf_r+0x20e>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c30:	f10a 0a01 	add.w	sl, sl, #1
 8000c34:	9304      	str	r3, [sp, #16]
 8000c36:	9307      	str	r3, [sp, #28]
 8000c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8000c3e:	4654      	mov	r4, sl
 8000c40:	2205      	movs	r2, #5
 8000c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c46:	4858      	ldr	r0, [pc, #352]	; (8000da8 <_vfiprintf_r+0x24c>)
 8000c48:	f7ff fae2 	bl	8000210 <memchr>
 8000c4c:	9a04      	ldr	r2, [sp, #16]
 8000c4e:	b9d8      	cbnz	r0, 8000c88 <_vfiprintf_r+0x12c>
 8000c50:	06d1      	lsls	r1, r2, #27
 8000c52:	bf44      	itt	mi
 8000c54:	2320      	movmi	r3, #32
 8000c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c5a:	0713      	lsls	r3, r2, #28
 8000c5c:	bf44      	itt	mi
 8000c5e:	232b      	movmi	r3, #43	; 0x2b
 8000c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c64:	f89a 3000 	ldrb.w	r3, [sl]
 8000c68:	2b2a      	cmp	r3, #42	; 0x2a
 8000c6a:	d015      	beq.n	8000c98 <_vfiprintf_r+0x13c>
 8000c6c:	9a07      	ldr	r2, [sp, #28]
 8000c6e:	4654      	mov	r4, sl
 8000c70:	2000      	movs	r0, #0
 8000c72:	f04f 0c0a 	mov.w	ip, #10
 8000c76:	4621      	mov	r1, r4
 8000c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c7c:	3b30      	subs	r3, #48	; 0x30
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d94e      	bls.n	8000d20 <_vfiprintf_r+0x1c4>
 8000c82:	b1b0      	cbz	r0, 8000cb2 <_vfiprintf_r+0x156>
 8000c84:	9207      	str	r2, [sp, #28]
 8000c86:	e014      	b.n	8000cb2 <_vfiprintf_r+0x156>
 8000c88:	eba0 0308 	sub.w	r3, r0, r8
 8000c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	9304      	str	r3, [sp, #16]
 8000c94:	46a2      	mov	sl, r4
 8000c96:	e7d2      	b.n	8000c3e <_vfiprintf_r+0xe2>
 8000c98:	9b03      	ldr	r3, [sp, #12]
 8000c9a:	1d19      	adds	r1, r3, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	9103      	str	r1, [sp, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfbb      	ittet	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8000caa:	9307      	strge	r3, [sp, #28]
 8000cac:	9307      	strlt	r3, [sp, #28]
 8000cae:	bfb8      	it	lt
 8000cb0:	9204      	strlt	r2, [sp, #16]
 8000cb2:	7823      	ldrb	r3, [r4, #0]
 8000cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb6:	d10c      	bne.n	8000cd2 <_vfiprintf_r+0x176>
 8000cb8:	7863      	ldrb	r3, [r4, #1]
 8000cba:	2b2a      	cmp	r3, #42	; 0x2a
 8000cbc:	d135      	bne.n	8000d2a <_vfiprintf_r+0x1ce>
 8000cbe:	9b03      	ldr	r3, [sp, #12]
 8000cc0:	1d1a      	adds	r2, r3, #4
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	9203      	str	r2, [sp, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bfb8      	it	lt
 8000cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cce:	3402      	adds	r4, #2
 8000cd0:	9305      	str	r3, [sp, #20]
 8000cd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000db8 <_vfiprintf_r+0x25c>
 8000cd6:	7821      	ldrb	r1, [r4, #0]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4650      	mov	r0, sl
 8000cdc:	f7ff fa98 	bl	8000210 <memchr>
 8000ce0:	b140      	cbz	r0, 8000cf4 <_vfiprintf_r+0x198>
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	eba0 000a 	sub.w	r0, r0, sl
 8000ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8000cec:	9b04      	ldr	r3, [sp, #16]
 8000cee:	4303      	orrs	r3, r0
 8000cf0:	3401      	adds	r4, #1
 8000cf2:	9304      	str	r3, [sp, #16]
 8000cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf8:	482c      	ldr	r0, [pc, #176]	; (8000dac <_vfiprintf_r+0x250>)
 8000cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cfe:	2206      	movs	r2, #6
 8000d00:	f7ff fa86 	bl	8000210 <memchr>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	d03f      	beq.n	8000d88 <_vfiprintf_r+0x22c>
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <_vfiprintf_r+0x254>)
 8000d0a:	bb1b      	cbnz	r3, 8000d54 <_vfiprintf_r+0x1f8>
 8000d0c:	9b03      	ldr	r3, [sp, #12]
 8000d0e:	3307      	adds	r3, #7
 8000d10:	f023 0307 	bic.w	r3, r3, #7
 8000d14:	3308      	adds	r3, #8
 8000d16:	9303      	str	r3, [sp, #12]
 8000d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d1a:	443b      	add	r3, r7
 8000d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d1e:	e767      	b.n	8000bf0 <_vfiprintf_r+0x94>
 8000d20:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d24:	460c      	mov	r4, r1
 8000d26:	2001      	movs	r0, #1
 8000d28:	e7a5      	b.n	8000c76 <_vfiprintf_r+0x11a>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	3401      	adds	r4, #1
 8000d2e:	9305      	str	r3, [sp, #20]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 0c0a 	mov.w	ip, #10
 8000d36:	4620      	mov	r0, r4
 8000d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d3c:	3a30      	subs	r2, #48	; 0x30
 8000d3e:	2a09      	cmp	r2, #9
 8000d40:	d903      	bls.n	8000d4a <_vfiprintf_r+0x1ee>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0c5      	beq.n	8000cd2 <_vfiprintf_r+0x176>
 8000d46:	9105      	str	r1, [sp, #20]
 8000d48:	e7c3      	b.n	8000cd2 <_vfiprintf_r+0x176>
 8000d4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d4e:	4604      	mov	r4, r0
 8000d50:	2301      	movs	r3, #1
 8000d52:	e7f0      	b.n	8000d36 <_vfiprintf_r+0x1da>
 8000d54:	ab03      	add	r3, sp, #12
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	462a      	mov	r2, r5
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <_vfiprintf_r+0x258>)
 8000d5c:	a904      	add	r1, sp, #16
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f3af 8000 	nop.w
 8000d64:	4607      	mov	r7, r0
 8000d66:	1c78      	adds	r0, r7, #1
 8000d68:	d1d6      	bne.n	8000d18 <_vfiprintf_r+0x1bc>
 8000d6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d6c:	07d9      	lsls	r1, r3, #31
 8000d6e:	d405      	bmi.n	8000d7c <_vfiprintf_r+0x220>
 8000d70:	89ab      	ldrh	r3, [r5, #12]
 8000d72:	059a      	lsls	r2, r3, #22
 8000d74:	d402      	bmi.n	8000d7c <_vfiprintf_r+0x220>
 8000d76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d78:	f7ff fe6b 	bl	8000a52 <__retarget_lock_release_recursive>
 8000d7c:	89ab      	ldrh	r3, [r5, #12]
 8000d7e:	065b      	lsls	r3, r3, #25
 8000d80:	f53f af12 	bmi.w	8000ba8 <_vfiprintf_r+0x4c>
 8000d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d86:	e711      	b.n	8000bac <_vfiprintf_r+0x50>
 8000d88:	ab03      	add	r3, sp, #12
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <_vfiprintf_r+0x258>)
 8000d90:	a904      	add	r1, sp, #16
 8000d92:	4630      	mov	r0, r6
 8000d94:	f000 f880 	bl	8000e98 <_printf_i>
 8000d98:	e7e4      	b.n	8000d64 <_vfiprintf_r+0x208>
 8000d9a:	bf00      	nop
 8000d9c:	0800175c 	.word	0x0800175c
 8000da0:	0800177c 	.word	0x0800177c
 8000da4:	0800173c 	.word	0x0800173c
 8000da8:	0800179c 	.word	0x0800179c
 8000dac:	080017a6 	.word	0x080017a6
 8000db0:	00000000 	.word	0x00000000
 8000db4:	08000b37 	.word	0x08000b37
 8000db8:	080017a2 	.word	0x080017a2

08000dbc <_printf_common>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	4616      	mov	r6, r2
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	688a      	ldr	r2, [r1, #8]
 8000dc6:	690b      	ldr	r3, [r1, #16]
 8000dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	bfb8      	it	lt
 8000dd0:	4613      	movlt	r3, r2
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dd8:	4607      	mov	r7, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	b10a      	cbz	r2, 8000de2 <_printf_common+0x26>
 8000dde:	3301      	adds	r3, #1
 8000de0:	6033      	str	r3, [r6, #0]
 8000de2:	6823      	ldr	r3, [r4, #0]
 8000de4:	0699      	lsls	r1, r3, #26
 8000de6:	bf42      	ittt	mi
 8000de8:	6833      	ldrmi	r3, [r6, #0]
 8000dea:	3302      	addmi	r3, #2
 8000dec:	6033      	strmi	r3, [r6, #0]
 8000dee:	6825      	ldr	r5, [r4, #0]
 8000df0:	f015 0506 	ands.w	r5, r5, #6
 8000df4:	d106      	bne.n	8000e04 <_printf_common+0x48>
 8000df6:	f104 0a19 	add.w	sl, r4, #25
 8000dfa:	68e3      	ldr	r3, [r4, #12]
 8000dfc:	6832      	ldr	r2, [r6, #0]
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	dc26      	bgt.n	8000e52 <_printf_common+0x96>
 8000e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e08:	1e13      	subs	r3, r2, #0
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	bf18      	it	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	0692      	lsls	r2, r2, #26
 8000e12:	d42b      	bmi.n	8000e6c <_printf_common+0xb0>
 8000e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e18:	4649      	mov	r1, r9
 8000e1a:	4638      	mov	r0, r7
 8000e1c:	47c0      	blx	r8
 8000e1e:	3001      	adds	r0, #1
 8000e20:	d01e      	beq.n	8000e60 <_printf_common+0xa4>
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	68e5      	ldr	r5, [r4, #12]
 8000e26:	6832      	ldr	r2, [r6, #0]
 8000e28:	f003 0306 	and.w	r3, r3, #6
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	bf08      	it	eq
 8000e30:	1aad      	subeq	r5, r5, r2
 8000e32:	68a3      	ldr	r3, [r4, #8]
 8000e34:	6922      	ldr	r2, [r4, #16]
 8000e36:	bf0c      	ite	eq
 8000e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e3c:	2500      	movne	r5, #0
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	bfc4      	itt	gt
 8000e42:	1a9b      	subgt	r3, r3, r2
 8000e44:	18ed      	addgt	r5, r5, r3
 8000e46:	2600      	movs	r6, #0
 8000e48:	341a      	adds	r4, #26
 8000e4a:	42b5      	cmp	r5, r6
 8000e4c:	d11a      	bne.n	8000e84 <_printf_common+0xc8>
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e008      	b.n	8000e64 <_printf_common+0xa8>
 8000e52:	2301      	movs	r3, #1
 8000e54:	4652      	mov	r2, sl
 8000e56:	4649      	mov	r1, r9
 8000e58:	4638      	mov	r0, r7
 8000e5a:	47c0      	blx	r8
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	d103      	bne.n	8000e68 <_printf_common+0xac>
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	3501      	adds	r5, #1
 8000e6a:	e7c6      	b.n	8000dfa <_printf_common+0x3e>
 8000e6c:	18e1      	adds	r1, r4, r3
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	2030      	movs	r0, #48	; 0x30
 8000e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e76:	4422      	add	r2, r4
 8000e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e80:	3302      	adds	r3, #2
 8000e82:	e7c7      	b.n	8000e14 <_printf_common+0x58>
 8000e84:	2301      	movs	r3, #1
 8000e86:	4622      	mov	r2, r4
 8000e88:	4649      	mov	r1, r9
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	47c0      	blx	r8
 8000e8e:	3001      	adds	r0, #1
 8000e90:	d0e6      	beq.n	8000e60 <_printf_common+0xa4>
 8000e92:	3601      	adds	r6, #1
 8000e94:	e7d9      	b.n	8000e4a <_printf_common+0x8e>
	...

08000e98 <_printf_i>:
 8000e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	4691      	mov	r9, r2
 8000ea0:	7e27      	ldrb	r7, [r4, #24]
 8000ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ea4:	2f78      	cmp	r7, #120	; 0x78
 8000ea6:	4680      	mov	r8, r0
 8000ea8:	469a      	mov	sl, r3
 8000eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000eae:	d807      	bhi.n	8000ec0 <_printf_i+0x28>
 8000eb0:	2f62      	cmp	r7, #98	; 0x62
 8000eb2:	d80a      	bhi.n	8000eca <_printf_i+0x32>
 8000eb4:	2f00      	cmp	r7, #0
 8000eb6:	f000 80d8 	beq.w	800106a <_printf_i+0x1d2>
 8000eba:	2f58      	cmp	r7, #88	; 0x58
 8000ebc:	f000 80a3 	beq.w	8001006 <_printf_i+0x16e>
 8000ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ec8:	e03a      	b.n	8000f40 <_printf_i+0xa8>
 8000eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ece:	2b15      	cmp	r3, #21
 8000ed0:	d8f6      	bhi.n	8000ec0 <_printf_i+0x28>
 8000ed2:	a001      	add	r0, pc, #4	; (adr r0, 8000ed8 <_printf_i+0x40>)
 8000ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000ed8:	08000f31 	.word	0x08000f31
 8000edc:	08000f45 	.word	0x08000f45
 8000ee0:	08000ec1 	.word	0x08000ec1
 8000ee4:	08000ec1 	.word	0x08000ec1
 8000ee8:	08000ec1 	.word	0x08000ec1
 8000eec:	08000ec1 	.word	0x08000ec1
 8000ef0:	08000f45 	.word	0x08000f45
 8000ef4:	08000ec1 	.word	0x08000ec1
 8000ef8:	08000ec1 	.word	0x08000ec1
 8000efc:	08000ec1 	.word	0x08000ec1
 8000f00:	08000ec1 	.word	0x08000ec1
 8000f04:	08001051 	.word	0x08001051
 8000f08:	08000f75 	.word	0x08000f75
 8000f0c:	08001033 	.word	0x08001033
 8000f10:	08000ec1 	.word	0x08000ec1
 8000f14:	08000ec1 	.word	0x08000ec1
 8000f18:	08001073 	.word	0x08001073
 8000f1c:	08000ec1 	.word	0x08000ec1
 8000f20:	08000f75 	.word	0x08000f75
 8000f24:	08000ec1 	.word	0x08000ec1
 8000f28:	08000ec1 	.word	0x08000ec1
 8000f2c:	0800103b 	.word	0x0800103b
 8000f30:	680b      	ldr	r3, [r1, #0]
 8000f32:	1d1a      	adds	r2, r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	600a      	str	r2, [r1, #0]
 8000f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0a3      	b.n	800108c <_printf_i+0x1f4>
 8000f44:	6825      	ldr	r5, [r4, #0]
 8000f46:	6808      	ldr	r0, [r1, #0]
 8000f48:	062e      	lsls	r6, r5, #24
 8000f4a:	f100 0304 	add.w	r3, r0, #4
 8000f4e:	d50a      	bpl.n	8000f66 <_printf_i+0xce>
 8000f50:	6805      	ldr	r5, [r0, #0]
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	da03      	bge.n	8000f60 <_printf_i+0xc8>
 8000f58:	232d      	movs	r3, #45	; 0x2d
 8000f5a:	426d      	negs	r5, r5
 8000f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f60:	485e      	ldr	r0, [pc, #376]	; (80010dc <_printf_i+0x244>)
 8000f62:	230a      	movs	r3, #10
 8000f64:	e019      	b.n	8000f9a <_printf_i+0x102>
 8000f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000f6a:	6805      	ldr	r5, [r0, #0]
 8000f6c:	600b      	str	r3, [r1, #0]
 8000f6e:	bf18      	it	ne
 8000f70:	b22d      	sxthne	r5, r5
 8000f72:	e7ef      	b.n	8000f54 <_printf_i+0xbc>
 8000f74:	680b      	ldr	r3, [r1, #0]
 8000f76:	6825      	ldr	r5, [r4, #0]
 8000f78:	1d18      	adds	r0, r3, #4
 8000f7a:	6008      	str	r0, [r1, #0]
 8000f7c:	0628      	lsls	r0, r5, #24
 8000f7e:	d501      	bpl.n	8000f84 <_printf_i+0xec>
 8000f80:	681d      	ldr	r5, [r3, #0]
 8000f82:	e002      	b.n	8000f8a <_printf_i+0xf2>
 8000f84:	0669      	lsls	r1, r5, #25
 8000f86:	d5fb      	bpl.n	8000f80 <_printf_i+0xe8>
 8000f88:	881d      	ldrh	r5, [r3, #0]
 8000f8a:	4854      	ldr	r0, [pc, #336]	; (80010dc <_printf_i+0x244>)
 8000f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8000f8e:	bf0c      	ite	eq
 8000f90:	2308      	moveq	r3, #8
 8000f92:	230a      	movne	r3, #10
 8000f94:	2100      	movs	r1, #0
 8000f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f9a:	6866      	ldr	r6, [r4, #4]
 8000f9c:	60a6      	str	r6, [r4, #8]
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	bfa2      	ittt	ge
 8000fa2:	6821      	ldrge	r1, [r4, #0]
 8000fa4:	f021 0104 	bicge.w	r1, r1, #4
 8000fa8:	6021      	strge	r1, [r4, #0]
 8000faa:	b90d      	cbnz	r5, 8000fb0 <_printf_i+0x118>
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d04d      	beq.n	800104c <_printf_i+0x1b4>
 8000fb0:	4616      	mov	r6, r2
 8000fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8000fba:	5dc7      	ldrb	r7, [r0, r7]
 8000fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fc0:	462f      	mov	r7, r5
 8000fc2:	42bb      	cmp	r3, r7
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	d9f4      	bls.n	8000fb2 <_printf_i+0x11a>
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d10b      	bne.n	8000fe4 <_printf_i+0x14c>
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	07df      	lsls	r7, r3, #31
 8000fd0:	d508      	bpl.n	8000fe4 <_printf_i+0x14c>
 8000fd2:	6923      	ldr	r3, [r4, #16]
 8000fd4:	6861      	ldr	r1, [r4, #4]
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	bfde      	ittt	le
 8000fda:	2330      	movle	r3, #48	; 0x30
 8000fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fe4:	1b92      	subs	r2, r2, r6
 8000fe6:	6122      	str	r2, [r4, #16]
 8000fe8:	f8cd a000 	str.w	sl, [sp]
 8000fec:	464b      	mov	r3, r9
 8000fee:	aa03      	add	r2, sp, #12
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4640      	mov	r0, r8
 8000ff4:	f7ff fee2 	bl	8000dbc <_printf_common>
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	d14c      	bne.n	8001096 <_printf_i+0x1fe>
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	b004      	add	sp, #16
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <_printf_i+0x244>)
 8001008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	680e      	ldr	r6, [r1, #0]
 8001010:	061f      	lsls	r7, r3, #24
 8001012:	f856 5b04 	ldr.w	r5, [r6], #4
 8001016:	600e      	str	r6, [r1, #0]
 8001018:	d514      	bpl.n	8001044 <_printf_i+0x1ac>
 800101a:	07d9      	lsls	r1, r3, #31
 800101c:	bf44      	itt	mi
 800101e:	f043 0320 	orrmi.w	r3, r3, #32
 8001022:	6023      	strmi	r3, [r4, #0]
 8001024:	b91d      	cbnz	r5, 800102e <_printf_i+0x196>
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	f023 0320 	bic.w	r3, r3, #32
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	2310      	movs	r3, #16
 8001030:	e7b0      	b.n	8000f94 <_printf_i+0xfc>
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	2378      	movs	r3, #120	; 0x78
 800103c:	4828      	ldr	r0, [pc, #160]	; (80010e0 <_printf_i+0x248>)
 800103e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001042:	e7e3      	b.n	800100c <_printf_i+0x174>
 8001044:	065e      	lsls	r6, r3, #25
 8001046:	bf48      	it	mi
 8001048:	b2ad      	uxthmi	r5, r5
 800104a:	e7e6      	b.n	800101a <_printf_i+0x182>
 800104c:	4616      	mov	r6, r2
 800104e:	e7bb      	b.n	8000fc8 <_printf_i+0x130>
 8001050:	680b      	ldr	r3, [r1, #0]
 8001052:	6826      	ldr	r6, [r4, #0]
 8001054:	6960      	ldr	r0, [r4, #20]
 8001056:	1d1d      	adds	r5, r3, #4
 8001058:	600d      	str	r5, [r1, #0]
 800105a:	0635      	lsls	r5, r6, #24
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	d501      	bpl.n	8001064 <_printf_i+0x1cc>
 8001060:	6018      	str	r0, [r3, #0]
 8001062:	e002      	b.n	800106a <_printf_i+0x1d2>
 8001064:	0671      	lsls	r1, r6, #25
 8001066:	d5fb      	bpl.n	8001060 <_printf_i+0x1c8>
 8001068:	8018      	strh	r0, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	6123      	str	r3, [r4, #16]
 800106e:	4616      	mov	r6, r2
 8001070:	e7ba      	b.n	8000fe8 <_printf_i+0x150>
 8001072:	680b      	ldr	r3, [r1, #0]
 8001074:	1d1a      	adds	r2, r3, #4
 8001076:	600a      	str	r2, [r1, #0]
 8001078:	681e      	ldr	r6, [r3, #0]
 800107a:	6862      	ldr	r2, [r4, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	4630      	mov	r0, r6
 8001080:	f7ff f8c6 	bl	8000210 <memchr>
 8001084:	b108      	cbz	r0, 800108a <_printf_i+0x1f2>
 8001086:	1b80      	subs	r0, r0, r6
 8001088:	6060      	str	r0, [r4, #4]
 800108a:	6863      	ldr	r3, [r4, #4]
 800108c:	6123      	str	r3, [r4, #16]
 800108e:	2300      	movs	r3, #0
 8001090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001094:	e7a8      	b.n	8000fe8 <_printf_i+0x150>
 8001096:	6923      	ldr	r3, [r4, #16]
 8001098:	4632      	mov	r2, r6
 800109a:	4649      	mov	r1, r9
 800109c:	4640      	mov	r0, r8
 800109e:	47d0      	blx	sl
 80010a0:	3001      	adds	r0, #1
 80010a2:	d0ab      	beq.n	8000ffc <_printf_i+0x164>
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	079b      	lsls	r3, r3, #30
 80010a8:	d413      	bmi.n	80010d2 <_printf_i+0x23a>
 80010aa:	68e0      	ldr	r0, [r4, #12]
 80010ac:	9b03      	ldr	r3, [sp, #12]
 80010ae:	4298      	cmp	r0, r3
 80010b0:	bfb8      	it	lt
 80010b2:	4618      	movlt	r0, r3
 80010b4:	e7a4      	b.n	8001000 <_printf_i+0x168>
 80010b6:	2301      	movs	r3, #1
 80010b8:	4632      	mov	r2, r6
 80010ba:	4649      	mov	r1, r9
 80010bc:	4640      	mov	r0, r8
 80010be:	47d0      	blx	sl
 80010c0:	3001      	adds	r0, #1
 80010c2:	d09b      	beq.n	8000ffc <_printf_i+0x164>
 80010c4:	3501      	adds	r5, #1
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	9903      	ldr	r1, [sp, #12]
 80010ca:	1a5b      	subs	r3, r3, r1
 80010cc:	42ab      	cmp	r3, r5
 80010ce:	dcf2      	bgt.n	80010b6 <_printf_i+0x21e>
 80010d0:	e7eb      	b.n	80010aa <_printf_i+0x212>
 80010d2:	2500      	movs	r5, #0
 80010d4:	f104 0619 	add.w	r6, r4, #25
 80010d8:	e7f5      	b.n	80010c6 <_printf_i+0x22e>
 80010da:	bf00      	nop
 80010dc:	080017ad 	.word	0x080017ad
 80010e0:	080017be 	.word	0x080017be

080010e4 <_sbrk_r>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4d06      	ldr	r5, [pc, #24]	; (8001100 <_sbrk_r+0x1c>)
 80010e8:	2300      	movs	r3, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	f7ff fa84 	bl	80005fc <_sbrk>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d102      	bne.n	80010fe <_sbrk_r+0x1a>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	b103      	cbz	r3, 80010fe <_sbrk_r+0x1a>
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	20000098 	.word	0x20000098

08001104 <__sread>:
 8001104:	b510      	push	{r4, lr}
 8001106:	460c      	mov	r4, r1
 8001108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110c:	f000 fab4 	bl	8001678 <_read_r>
 8001110:	2800      	cmp	r0, #0
 8001112:	bfab      	itete	ge
 8001114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001116:	89a3      	ldrhlt	r3, [r4, #12]
 8001118:	181b      	addge	r3, r3, r0
 800111a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800111e:	bfac      	ite	ge
 8001120:	6563      	strge	r3, [r4, #84]	; 0x54
 8001122:	81a3      	strhlt	r3, [r4, #12]
 8001124:	bd10      	pop	{r4, pc}

08001126 <__swrite>:
 8001126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	461f      	mov	r7, r3
 800112c:	898b      	ldrh	r3, [r1, #12]
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	4605      	mov	r5, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4616      	mov	r6, r2
 8001136:	d505      	bpl.n	8001144 <__swrite+0x1e>
 8001138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113c:	2302      	movs	r3, #2
 800113e:	2200      	movs	r2, #0
 8001140:	f000 f9c8 	bl	80014d4 <_lseek_r>
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800114a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800114e:	81a3      	strh	r3, [r4, #12]
 8001150:	4632      	mov	r2, r6
 8001152:	463b      	mov	r3, r7
 8001154:	4628      	mov	r0, r5
 8001156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800115a:	f000 b869 	b.w	8001230 <_write_r>

0800115e <__sseek>:
 800115e:	b510      	push	{r4, lr}
 8001160:	460c      	mov	r4, r1
 8001162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001166:	f000 f9b5 	bl	80014d4 <_lseek_r>
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	bf15      	itete	ne
 8001170:	6560      	strne	r0, [r4, #84]	; 0x54
 8001172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800117a:	81a3      	strheq	r3, [r4, #12]
 800117c:	bf18      	it	ne
 800117e:	81a3      	strhne	r3, [r4, #12]
 8001180:	bd10      	pop	{r4, pc}

08001182 <__sclose>:
 8001182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001186:	f000 b8d3 	b.w	8001330 <_close_r>
	...

0800118c <__swbuf_r>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	460e      	mov	r6, r1
 8001190:	4614      	mov	r4, r2
 8001192:	4605      	mov	r5, r0
 8001194:	b118      	cbz	r0, 800119e <__swbuf_r+0x12>
 8001196:	6983      	ldr	r3, [r0, #24]
 8001198:	b90b      	cbnz	r3, 800119e <__swbuf_r+0x12>
 800119a:	f7ff fbbb 	bl	8000914 <__sinit>
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <__swbuf_r+0x98>)
 80011a0:	429c      	cmp	r4, r3
 80011a2:	d12b      	bne.n	80011fc <__swbuf_r+0x70>
 80011a4:	686c      	ldr	r4, [r5, #4]
 80011a6:	69a3      	ldr	r3, [r4, #24]
 80011a8:	60a3      	str	r3, [r4, #8]
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	071a      	lsls	r2, r3, #28
 80011ae:	d52f      	bpl.n	8001210 <__swbuf_r+0x84>
 80011b0:	6923      	ldr	r3, [r4, #16]
 80011b2:	b36b      	cbz	r3, 8001210 <__swbuf_r+0x84>
 80011b4:	6923      	ldr	r3, [r4, #16]
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	1ac0      	subs	r0, r0, r3
 80011ba:	6963      	ldr	r3, [r4, #20]
 80011bc:	b2f6      	uxtb	r6, r6
 80011be:	4283      	cmp	r3, r0
 80011c0:	4637      	mov	r7, r6
 80011c2:	dc04      	bgt.n	80011ce <__swbuf_r+0x42>
 80011c4:	4621      	mov	r1, r4
 80011c6:	4628      	mov	r0, r5
 80011c8:	f000 f948 	bl	800145c <_fflush_r>
 80011cc:	bb30      	cbnz	r0, 800121c <__swbuf_r+0x90>
 80011ce:	68a3      	ldr	r3, [r4, #8]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60a3      	str	r3, [r4, #8]
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	6022      	str	r2, [r4, #0]
 80011da:	701e      	strb	r6, [r3, #0]
 80011dc:	6963      	ldr	r3, [r4, #20]
 80011de:	3001      	adds	r0, #1
 80011e0:	4283      	cmp	r3, r0
 80011e2:	d004      	beq.n	80011ee <__swbuf_r+0x62>
 80011e4:	89a3      	ldrh	r3, [r4, #12]
 80011e6:	07db      	lsls	r3, r3, #31
 80011e8:	d506      	bpl.n	80011f8 <__swbuf_r+0x6c>
 80011ea:	2e0a      	cmp	r6, #10
 80011ec:	d104      	bne.n	80011f8 <__swbuf_r+0x6c>
 80011ee:	4621      	mov	r1, r4
 80011f0:	4628      	mov	r0, r5
 80011f2:	f000 f933 	bl	800145c <_fflush_r>
 80011f6:	b988      	cbnz	r0, 800121c <__swbuf_r+0x90>
 80011f8:	4638      	mov	r0, r7
 80011fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <__swbuf_r+0x9c>)
 80011fe:	429c      	cmp	r4, r3
 8001200:	d101      	bne.n	8001206 <__swbuf_r+0x7a>
 8001202:	68ac      	ldr	r4, [r5, #8]
 8001204:	e7cf      	b.n	80011a6 <__swbuf_r+0x1a>
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <__swbuf_r+0xa0>)
 8001208:	429c      	cmp	r4, r3
 800120a:	bf08      	it	eq
 800120c:	68ec      	ldreq	r4, [r5, #12]
 800120e:	e7ca      	b.n	80011a6 <__swbuf_r+0x1a>
 8001210:	4621      	mov	r1, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f000 f81e 	bl	8001254 <__swsetup_r>
 8001218:	2800      	cmp	r0, #0
 800121a:	d0cb      	beq.n	80011b4 <__swbuf_r+0x28>
 800121c:	f04f 37ff 	mov.w	r7, #4294967295
 8001220:	e7ea      	b.n	80011f8 <__swbuf_r+0x6c>
 8001222:	bf00      	nop
 8001224:	0800175c 	.word	0x0800175c
 8001228:	0800177c 	.word	0x0800177c
 800122c:	0800173c 	.word	0x0800173c

08001230 <_write_r>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4d07      	ldr	r5, [pc, #28]	; (8001250 <_write_r+0x20>)
 8001234:	4604      	mov	r4, r0
 8001236:	4608      	mov	r0, r1
 8001238:	4611      	mov	r1, r2
 800123a:	2200      	movs	r2, #0
 800123c:	602a      	str	r2, [r5, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	f7ff f98b 	bl	800055a <_write>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_write_r+0x1e>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	b103      	cbz	r3, 800124e <_write_r+0x1e>
 800124c:	6023      	str	r3, [r4, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	20000098 	.word	0x20000098

08001254 <__swsetup_r>:
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <__swsetup_r+0xcc>)
 8001256:	b570      	push	{r4, r5, r6, lr}
 8001258:	681d      	ldr	r5, [r3, #0]
 800125a:	4606      	mov	r6, r0
 800125c:	460c      	mov	r4, r1
 800125e:	b125      	cbz	r5, 800126a <__swsetup_r+0x16>
 8001260:	69ab      	ldr	r3, [r5, #24]
 8001262:	b913      	cbnz	r3, 800126a <__swsetup_r+0x16>
 8001264:	4628      	mov	r0, r5
 8001266:	f7ff fb55 	bl	8000914 <__sinit>
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <__swsetup_r+0xd0>)
 800126c:	429c      	cmp	r4, r3
 800126e:	d10f      	bne.n	8001290 <__swsetup_r+0x3c>
 8001270:	686c      	ldr	r4, [r5, #4]
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001278:	0719      	lsls	r1, r3, #28
 800127a:	d42c      	bmi.n	80012d6 <__swsetup_r+0x82>
 800127c:	06dd      	lsls	r5, r3, #27
 800127e:	d411      	bmi.n	80012a4 <__swsetup_r+0x50>
 8001280:	2309      	movs	r3, #9
 8001282:	6033      	str	r3, [r6, #0]
 8001284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	e03e      	b.n	800130e <__swsetup_r+0xba>
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <__swsetup_r+0xd4>)
 8001292:	429c      	cmp	r4, r3
 8001294:	d101      	bne.n	800129a <__swsetup_r+0x46>
 8001296:	68ac      	ldr	r4, [r5, #8]
 8001298:	e7eb      	b.n	8001272 <__swsetup_r+0x1e>
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <__swsetup_r+0xd8>)
 800129c:	429c      	cmp	r4, r3
 800129e:	bf08      	it	eq
 80012a0:	68ec      	ldreq	r4, [r5, #12]
 80012a2:	e7e6      	b.n	8001272 <__swsetup_r+0x1e>
 80012a4:	0758      	lsls	r0, r3, #29
 80012a6:	d512      	bpl.n	80012ce <__swsetup_r+0x7a>
 80012a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012aa:	b141      	cbz	r1, 80012be <__swsetup_r+0x6a>
 80012ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012b0:	4299      	cmp	r1, r3
 80012b2:	d002      	beq.n	80012ba <__swsetup_r+0x66>
 80012b4:	4630      	mov	r0, r6
 80012b6:	f000 f98f 	bl	80015d8 <_free_r>
 80012ba:	2300      	movs	r3, #0
 80012bc:	6363      	str	r3, [r4, #52]	; 0x34
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	6063      	str	r3, [r4, #4]
 80012ca:	6923      	ldr	r3, [r4, #16]
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	b94b      	cbnz	r3, 80012ee <__swsetup_r+0x9a>
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e4:	d003      	beq.n	80012ee <__swsetup_r+0x9a>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4630      	mov	r0, r6
 80012ea:	f000 f929 	bl	8001540 <__smakebuf_r>
 80012ee:	89a0      	ldrh	r0, [r4, #12]
 80012f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012f4:	f010 0301 	ands.w	r3, r0, #1
 80012f8:	d00a      	beq.n	8001310 <__swsetup_r+0xbc>
 80012fa:	2300      	movs	r3, #0
 80012fc:	60a3      	str	r3, [r4, #8]
 80012fe:	6963      	ldr	r3, [r4, #20]
 8001300:	425b      	negs	r3, r3
 8001302:	61a3      	str	r3, [r4, #24]
 8001304:	6923      	ldr	r3, [r4, #16]
 8001306:	b943      	cbnz	r3, 800131a <__swsetup_r+0xc6>
 8001308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800130c:	d1ba      	bne.n	8001284 <__swsetup_r+0x30>
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	0781      	lsls	r1, r0, #30
 8001312:	bf58      	it	pl
 8001314:	6963      	ldrpl	r3, [r4, #20]
 8001316:	60a3      	str	r3, [r4, #8]
 8001318:	e7f4      	b.n	8001304 <__swsetup_r+0xb0>
 800131a:	2000      	movs	r0, #0
 800131c:	e7f7      	b.n	800130e <__swsetup_r+0xba>
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	0800175c 	.word	0x0800175c
 8001328:	0800177c 	.word	0x0800177c
 800132c:	0800173c 	.word	0x0800173c

08001330 <_close_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4d06      	ldr	r5, [pc, #24]	; (800134c <_close_r+0x1c>)
 8001334:	2300      	movs	r3, #0
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	602b      	str	r3, [r5, #0]
 800133c:	f7ff f929 	bl	8000592 <_close>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_close_r+0x1a>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	b103      	cbz	r3, 800134a <_close_r+0x1a>
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	20000098 	.word	0x20000098

08001350 <__sflush_r>:
 8001350:	898a      	ldrh	r2, [r1, #12]
 8001352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001356:	4605      	mov	r5, r0
 8001358:	0710      	lsls	r0, r2, #28
 800135a:	460c      	mov	r4, r1
 800135c:	d458      	bmi.n	8001410 <__sflush_r+0xc0>
 800135e:	684b      	ldr	r3, [r1, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dc05      	bgt.n	8001370 <__sflush_r+0x20>
 8001364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	dc02      	bgt.n	8001370 <__sflush_r+0x20>
 800136a:	2000      	movs	r0, #0
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001372:	2e00      	cmp	r6, #0
 8001374:	d0f9      	beq.n	800136a <__sflush_r+0x1a>
 8001376:	2300      	movs	r3, #0
 8001378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800137c:	682f      	ldr	r7, [r5, #0]
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	d032      	beq.n	80013e8 <__sflush_r+0x98>
 8001382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	075a      	lsls	r2, r3, #29
 8001388:	d505      	bpl.n	8001396 <__sflush_r+0x46>
 800138a:	6863      	ldr	r3, [r4, #4]
 800138c:	1ac0      	subs	r0, r0, r3
 800138e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001390:	b10b      	cbz	r3, 8001396 <__sflush_r+0x46>
 8001392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001394:	1ac0      	subs	r0, r0, r3
 8001396:	2300      	movs	r3, #0
 8001398:	4602      	mov	r2, r0
 800139a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800139c:	6a21      	ldr	r1, [r4, #32]
 800139e:	4628      	mov	r0, r5
 80013a0:	47b0      	blx	r6
 80013a2:	1c43      	adds	r3, r0, #1
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	d106      	bne.n	80013b6 <__sflush_r+0x66>
 80013a8:	6829      	ldr	r1, [r5, #0]
 80013aa:	291d      	cmp	r1, #29
 80013ac:	d82c      	bhi.n	8001408 <__sflush_r+0xb8>
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <__sflush_r+0x108>)
 80013b0:	40ca      	lsrs	r2, r1
 80013b2:	07d6      	lsls	r6, r2, #31
 80013b4:	d528      	bpl.n	8001408 <__sflush_r+0xb8>
 80013b6:	2200      	movs	r2, #0
 80013b8:	6062      	str	r2, [r4, #4]
 80013ba:	04d9      	lsls	r1, r3, #19
 80013bc:	6922      	ldr	r2, [r4, #16]
 80013be:	6022      	str	r2, [r4, #0]
 80013c0:	d504      	bpl.n	80013cc <__sflush_r+0x7c>
 80013c2:	1c42      	adds	r2, r0, #1
 80013c4:	d101      	bne.n	80013ca <__sflush_r+0x7a>
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	b903      	cbnz	r3, 80013cc <__sflush_r+0x7c>
 80013ca:	6560      	str	r0, [r4, #84]	; 0x54
 80013cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013ce:	602f      	str	r7, [r5, #0]
 80013d0:	2900      	cmp	r1, #0
 80013d2:	d0ca      	beq.n	800136a <__sflush_r+0x1a>
 80013d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013d8:	4299      	cmp	r1, r3
 80013da:	d002      	beq.n	80013e2 <__sflush_r+0x92>
 80013dc:	4628      	mov	r0, r5
 80013de:	f000 f8fb 	bl	80015d8 <_free_r>
 80013e2:	2000      	movs	r0, #0
 80013e4:	6360      	str	r0, [r4, #52]	; 0x34
 80013e6:	e7c1      	b.n	800136c <__sflush_r+0x1c>
 80013e8:	6a21      	ldr	r1, [r4, #32]
 80013ea:	2301      	movs	r3, #1
 80013ec:	4628      	mov	r0, r5
 80013ee:	47b0      	blx	r6
 80013f0:	1c41      	adds	r1, r0, #1
 80013f2:	d1c7      	bne.n	8001384 <__sflush_r+0x34>
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0c4      	beq.n	8001384 <__sflush_r+0x34>
 80013fa:	2b1d      	cmp	r3, #29
 80013fc:	d001      	beq.n	8001402 <__sflush_r+0xb2>
 80013fe:	2b16      	cmp	r3, #22
 8001400:	d101      	bne.n	8001406 <__sflush_r+0xb6>
 8001402:	602f      	str	r7, [r5, #0]
 8001404:	e7b1      	b.n	800136a <__sflush_r+0x1a>
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140c:	81a3      	strh	r3, [r4, #12]
 800140e:	e7ad      	b.n	800136c <__sflush_r+0x1c>
 8001410:	690f      	ldr	r7, [r1, #16]
 8001412:	2f00      	cmp	r7, #0
 8001414:	d0a9      	beq.n	800136a <__sflush_r+0x1a>
 8001416:	0793      	lsls	r3, r2, #30
 8001418:	680e      	ldr	r6, [r1, #0]
 800141a:	bf08      	it	eq
 800141c:	694b      	ldreq	r3, [r1, #20]
 800141e:	600f      	str	r7, [r1, #0]
 8001420:	bf18      	it	ne
 8001422:	2300      	movne	r3, #0
 8001424:	eba6 0807 	sub.w	r8, r6, r7
 8001428:	608b      	str	r3, [r1, #8]
 800142a:	f1b8 0f00 	cmp.w	r8, #0
 800142e:	dd9c      	ble.n	800136a <__sflush_r+0x1a>
 8001430:	6a21      	ldr	r1, [r4, #32]
 8001432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001434:	4643      	mov	r3, r8
 8001436:	463a      	mov	r2, r7
 8001438:	4628      	mov	r0, r5
 800143a:	47b0      	blx	r6
 800143c:	2800      	cmp	r0, #0
 800143e:	dc06      	bgt.n	800144e <__sflush_r+0xfe>
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001446:	81a3      	strh	r3, [r4, #12]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	e78e      	b.n	800136c <__sflush_r+0x1c>
 800144e:	4407      	add	r7, r0
 8001450:	eba8 0800 	sub.w	r8, r8, r0
 8001454:	e7e9      	b.n	800142a <__sflush_r+0xda>
 8001456:	bf00      	nop
 8001458:	20400001 	.word	0x20400001

0800145c <_fflush_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	690b      	ldr	r3, [r1, #16]
 8001460:	4605      	mov	r5, r0
 8001462:	460c      	mov	r4, r1
 8001464:	b913      	cbnz	r3, 800146c <_fflush_r+0x10>
 8001466:	2500      	movs	r5, #0
 8001468:	4628      	mov	r0, r5
 800146a:	bd38      	pop	{r3, r4, r5, pc}
 800146c:	b118      	cbz	r0, 8001476 <_fflush_r+0x1a>
 800146e:	6983      	ldr	r3, [r0, #24]
 8001470:	b90b      	cbnz	r3, 8001476 <_fflush_r+0x1a>
 8001472:	f7ff fa4f 	bl	8000914 <__sinit>
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <_fflush_r+0x6c>)
 8001478:	429c      	cmp	r4, r3
 800147a:	d11b      	bne.n	80014b4 <_fflush_r+0x58>
 800147c:	686c      	ldr	r4, [r5, #4]
 800147e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ef      	beq.n	8001466 <_fflush_r+0xa>
 8001486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001488:	07d0      	lsls	r0, r2, #31
 800148a:	d404      	bmi.n	8001496 <_fflush_r+0x3a>
 800148c:	0599      	lsls	r1, r3, #22
 800148e:	d402      	bmi.n	8001496 <_fflush_r+0x3a>
 8001490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001492:	f7ff fadd 	bl	8000a50 <__retarget_lock_acquire_recursive>
 8001496:	4628      	mov	r0, r5
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff ff59 	bl	8001350 <__sflush_r>
 800149e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014a0:	07da      	lsls	r2, r3, #31
 80014a2:	4605      	mov	r5, r0
 80014a4:	d4e0      	bmi.n	8001468 <_fflush_r+0xc>
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	059b      	lsls	r3, r3, #22
 80014aa:	d4dd      	bmi.n	8001468 <_fflush_r+0xc>
 80014ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014ae:	f7ff fad0 	bl	8000a52 <__retarget_lock_release_recursive>
 80014b2:	e7d9      	b.n	8001468 <_fflush_r+0xc>
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <_fflush_r+0x70>)
 80014b6:	429c      	cmp	r4, r3
 80014b8:	d101      	bne.n	80014be <_fflush_r+0x62>
 80014ba:	68ac      	ldr	r4, [r5, #8]
 80014bc:	e7df      	b.n	800147e <_fflush_r+0x22>
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <_fflush_r+0x74>)
 80014c0:	429c      	cmp	r4, r3
 80014c2:	bf08      	it	eq
 80014c4:	68ec      	ldreq	r4, [r5, #12]
 80014c6:	e7da      	b.n	800147e <_fflush_r+0x22>
 80014c8:	0800175c 	.word	0x0800175c
 80014cc:	0800177c 	.word	0x0800177c
 80014d0:	0800173c 	.word	0x0800173c

080014d4 <_lseek_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d07      	ldr	r5, [pc, #28]	; (80014f4 <_lseek_r+0x20>)
 80014d8:	4604      	mov	r4, r0
 80014da:	4608      	mov	r0, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	2200      	movs	r2, #0
 80014e0:	602a      	str	r2, [r5, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f7ff f87c 	bl	80005e0 <_lseek>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_lseek_r+0x1e>
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_lseek_r+0x1e>
 80014f0:	6023      	str	r3, [r4, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	20000098 	.word	0x20000098

080014f8 <__swhatbuf_r>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	460e      	mov	r6, r1
 80014fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001500:	2900      	cmp	r1, #0
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	4614      	mov	r4, r2
 8001506:	461d      	mov	r5, r3
 8001508:	da07      	bge.n	800151a <__swhatbuf_r+0x22>
 800150a:	2300      	movs	r3, #0
 800150c:	602b      	str	r3, [r5, #0]
 800150e:	89b3      	ldrh	r3, [r6, #12]
 8001510:	061a      	lsls	r2, r3, #24
 8001512:	d410      	bmi.n	8001536 <__swhatbuf_r+0x3e>
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	e00e      	b.n	8001538 <__swhatbuf_r+0x40>
 800151a:	466a      	mov	r2, sp
 800151c:	f000 f8be 	bl	800169c <_fstat_r>
 8001520:	2800      	cmp	r0, #0
 8001522:	dbf2      	blt.n	800150a <__swhatbuf_r+0x12>
 8001524:	9a01      	ldr	r2, [sp, #4]
 8001526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800152a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800152e:	425a      	negs	r2, r3
 8001530:	415a      	adcs	r2, r3
 8001532:	602a      	str	r2, [r5, #0]
 8001534:	e7ee      	b.n	8001514 <__swhatbuf_r+0x1c>
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	2000      	movs	r0, #0
 800153a:	6023      	str	r3, [r4, #0]
 800153c:	b016      	add	sp, #88	; 0x58
 800153e:	bd70      	pop	{r4, r5, r6, pc}

08001540 <__smakebuf_r>:
 8001540:	898b      	ldrh	r3, [r1, #12]
 8001542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001544:	079d      	lsls	r5, r3, #30
 8001546:	4606      	mov	r6, r0
 8001548:	460c      	mov	r4, r1
 800154a:	d507      	bpl.n	800155c <__smakebuf_r+0x1c>
 800154c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001550:	6023      	str	r3, [r4, #0]
 8001552:	6123      	str	r3, [r4, #16]
 8001554:	2301      	movs	r3, #1
 8001556:	6163      	str	r3, [r4, #20]
 8001558:	b002      	add	sp, #8
 800155a:	bd70      	pop	{r4, r5, r6, pc}
 800155c:	ab01      	add	r3, sp, #4
 800155e:	466a      	mov	r2, sp
 8001560:	f7ff ffca 	bl	80014f8 <__swhatbuf_r>
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4605      	mov	r5, r0
 8001568:	4630      	mov	r0, r6
 800156a:	f7ff fa73 	bl	8000a54 <_malloc_r>
 800156e:	b948      	cbnz	r0, 8001584 <__smakebuf_r+0x44>
 8001570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001574:	059a      	lsls	r2, r3, #22
 8001576:	d4ef      	bmi.n	8001558 <__smakebuf_r+0x18>
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	81a3      	strh	r3, [r4, #12]
 8001582:	e7e3      	b.n	800154c <__smakebuf_r+0xc>
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <__smakebuf_r+0x7c>)
 8001586:	62b3      	str	r3, [r6, #40]	; 0x28
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	6020      	str	r0, [r4, #0]
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	81a3      	strh	r3, [r4, #12]
 8001592:	9b00      	ldr	r3, [sp, #0]
 8001594:	6163      	str	r3, [r4, #20]
 8001596:	9b01      	ldr	r3, [sp, #4]
 8001598:	6120      	str	r0, [r4, #16]
 800159a:	b15b      	cbz	r3, 80015b4 <__smakebuf_r+0x74>
 800159c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015a0:	4630      	mov	r0, r6
 80015a2:	f000 f88d 	bl	80016c0 <_isatty_r>
 80015a6:	b128      	cbz	r0, 80015b4 <__smakebuf_r+0x74>
 80015a8:	89a3      	ldrh	r3, [r4, #12]
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	89a0      	ldrh	r0, [r4, #12]
 80015b6:	4305      	orrs	r5, r0
 80015b8:	81a5      	strh	r5, [r4, #12]
 80015ba:	e7cd      	b.n	8001558 <__smakebuf_r+0x18>
 80015bc:	080008ad 	.word	0x080008ad

080015c0 <__malloc_lock>:
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <__malloc_lock+0x8>)
 80015c2:	f7ff ba45 	b.w	8000a50 <__retarget_lock_acquire_recursive>
 80015c6:	bf00      	nop
 80015c8:	20000090 	.word	0x20000090

080015cc <__malloc_unlock>:
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <__malloc_unlock+0x8>)
 80015ce:	f7ff ba40 	b.w	8000a52 <__retarget_lock_release_recursive>
 80015d2:	bf00      	nop
 80015d4:	20000090 	.word	0x20000090

080015d8 <_free_r>:
 80015d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015da:	2900      	cmp	r1, #0
 80015dc:	d048      	beq.n	8001670 <_free_r+0x98>
 80015de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015e2:	9001      	str	r0, [sp, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f1a1 0404 	sub.w	r4, r1, #4
 80015ea:	bfb8      	it	lt
 80015ec:	18e4      	addlt	r4, r4, r3
 80015ee:	f7ff ffe7 	bl	80015c0 <__malloc_lock>
 80015f2:	4a20      	ldr	r2, [pc, #128]	; (8001674 <_free_r+0x9c>)
 80015f4:	9801      	ldr	r0, [sp, #4]
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	4615      	mov	r5, r2
 80015fa:	b933      	cbnz	r3, 800160a <_free_r+0x32>
 80015fc:	6063      	str	r3, [r4, #4]
 80015fe:	6014      	str	r4, [r2, #0]
 8001600:	b003      	add	sp, #12
 8001602:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001606:	f7ff bfe1 	b.w	80015cc <__malloc_unlock>
 800160a:	42a3      	cmp	r3, r4
 800160c:	d90b      	bls.n	8001626 <_free_r+0x4e>
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	1862      	adds	r2, r4, r1
 8001612:	4293      	cmp	r3, r2
 8001614:	bf04      	itt	eq
 8001616:	681a      	ldreq	r2, [r3, #0]
 8001618:	685b      	ldreq	r3, [r3, #4]
 800161a:	6063      	str	r3, [r4, #4]
 800161c:	bf04      	itt	eq
 800161e:	1852      	addeq	r2, r2, r1
 8001620:	6022      	streq	r2, [r4, #0]
 8001622:	602c      	str	r4, [r5, #0]
 8001624:	e7ec      	b.n	8001600 <_free_r+0x28>
 8001626:	461a      	mov	r2, r3
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b10b      	cbz	r3, 8001630 <_free_r+0x58>
 800162c:	42a3      	cmp	r3, r4
 800162e:	d9fa      	bls.n	8001626 <_free_r+0x4e>
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	1855      	adds	r5, r2, r1
 8001634:	42a5      	cmp	r5, r4
 8001636:	d10b      	bne.n	8001650 <_free_r+0x78>
 8001638:	6824      	ldr	r4, [r4, #0]
 800163a:	4421      	add	r1, r4
 800163c:	1854      	adds	r4, r2, r1
 800163e:	42a3      	cmp	r3, r4
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	d1dd      	bne.n	8001600 <_free_r+0x28>
 8001644:	681c      	ldr	r4, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	6053      	str	r3, [r2, #4]
 800164a:	4421      	add	r1, r4
 800164c:	6011      	str	r1, [r2, #0]
 800164e:	e7d7      	b.n	8001600 <_free_r+0x28>
 8001650:	d902      	bls.n	8001658 <_free_r+0x80>
 8001652:	230c      	movs	r3, #12
 8001654:	6003      	str	r3, [r0, #0]
 8001656:	e7d3      	b.n	8001600 <_free_r+0x28>
 8001658:	6825      	ldr	r5, [r4, #0]
 800165a:	1961      	adds	r1, r4, r5
 800165c:	428b      	cmp	r3, r1
 800165e:	bf04      	itt	eq
 8001660:	6819      	ldreq	r1, [r3, #0]
 8001662:	685b      	ldreq	r3, [r3, #4]
 8001664:	6063      	str	r3, [r4, #4]
 8001666:	bf04      	itt	eq
 8001668:	1949      	addeq	r1, r1, r5
 800166a:	6021      	streq	r1, [r4, #0]
 800166c:	6054      	str	r4, [r2, #4]
 800166e:	e7c7      	b.n	8001600 <_free_r+0x28>
 8001670:	b003      	add	sp, #12
 8001672:	bd30      	pop	{r4, r5, pc}
 8001674:	20000084 	.word	0x20000084

08001678 <_read_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4d07      	ldr	r5, [pc, #28]	; (8001698 <_read_r+0x20>)
 800167c:	4604      	mov	r4, r0
 800167e:	4608      	mov	r0, r1
 8001680:	4611      	mov	r1, r2
 8001682:	2200      	movs	r2, #0
 8001684:	602a      	str	r2, [r5, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	f7fe ff4a 	bl	8000520 <_read>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d102      	bne.n	8001696 <_read_r+0x1e>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	b103      	cbz	r3, 8001696 <_read_r+0x1e>
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	bd38      	pop	{r3, r4, r5, pc}
 8001698:	20000098 	.word	0x20000098

0800169c <_fstat_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d07      	ldr	r5, [pc, #28]	; (80016bc <_fstat_r+0x20>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	602b      	str	r3, [r5, #0]
 80016aa:	f7fe ff7e 	bl	80005aa <_fstat>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	d102      	bne.n	80016b8 <_fstat_r+0x1c>
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	b103      	cbz	r3, 80016b8 <_fstat_r+0x1c>
 80016b6:	6023      	str	r3, [r4, #0]
 80016b8:	bd38      	pop	{r3, r4, r5, pc}
 80016ba:	bf00      	nop
 80016bc:	20000098 	.word	0x20000098

080016c0 <_isatty_r>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4d06      	ldr	r5, [pc, #24]	; (80016dc <_isatty_r+0x1c>)
 80016c4:	2300      	movs	r3, #0
 80016c6:	4604      	mov	r4, r0
 80016c8:	4608      	mov	r0, r1
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	f7fe ff7d 	bl	80005ca <_isatty>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d102      	bne.n	80016da <_isatty_r+0x1a>
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	b103      	cbz	r3, 80016da <_isatty_r+0x1a>
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	20000098 	.word	0x20000098

080016e0 <_init>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr

080016ec <_fini>:
 80016ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ee:	bf00      	nop
 80016f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f2:	bc08      	pop	{r3}
 80016f4:	469e      	mov	lr, r3
 80016f6:	4770      	bx	lr

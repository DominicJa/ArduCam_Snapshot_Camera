#include "stm32f4xx.h"
#include <stdint.h>
#include "tim.h"

#define TIM2EN		(1U<<0)
#define TIM3EN		(1U<<1)
#define CR1_OPM		(1U<<3)
#define CR1_CEN		(1U<<0)
#define DIER_UIE	(1U<<0)

#define GPIOAEN		(1U<<0)


//This is a blocking function. I want to try to make something better.
void tim3_ms_delay(uint32_t delay)
{
	/*Enable clock access to timer3*/
	RCC->APB1ENR |= TIM3EN;

	/*Set prescaler value*/
	TIM3->PSC = 160 - 1; // 16 000 000 / 160 = 100 000

	/*Set auto-reload value*/
	TIM3->ARR = 100 - 1; // 100 / 100 000 = 0.001

	/*Clear counter*/
	TIM3->CNT = 0;

	/*Enable timer3*/
	TIM3->CR1 = CR1_CEN;

	for(uint32_t i = 0; i < delay; i++){
		/*Wait for UIF*/
		while(!(TIM3->SR & SR_UIF)){}

		/*Clear UIF*/
		TIM3->SR &= ~SR_UIF;

	}

	/*Disable timer3*/
	TIM3->CR1 &= ~CR1_CEN;

}


//Initialization function for timer3 in one shot mode (20ms) with interrupts
void tim3_debounce_init(void)
{
	/*Enable clock access to timer3*/
	RCC->APB1ENR |= TIM3EN;

	/*Set timer3 for One-pulse mode*/
	TIM3->CR1 |= CR1_OPM;

	/*Set prescaler value and auto-reload value for 20ms*/
	TIM3->PSC = 1600 - 1; // 16 000 000 / 1 600 = 10 000
	TIM3->ARR = 200 - 1; // 200 / 10 000 = 0.02

	/*Enable update interrupt*/
	TIM3->DIER |= DIER_UIE;

	/*Enable TIM3 interrupt in NVIC*/
	NVIC_EnableIRQ(TIM3_IRQn);

}

//Function to start timer3
void tim3_start(void)
{
	/*Clear counter*/
	TIM3->CNT = 0;

	/*Clear UIF*/
	TIM3->SR &= ~SR_UIF;

	/*Enable Timer3*/
	TIM3->CR1 |= CR1_CEN;

}


//This function will be used to set up pwm for
void tim2_pwm(void)
{
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;

	/*Set PA0 & PA1 mode to alternate function*/
	GPIOA->MODER &= ~(3U<<0);
	GPIOA->MODER |= (1U<<1);

	GPIOA->MODER &= ~(3U<<2);
	GPIOA->MODER |= (1U<<3);


	/*Enable clock access to timer2*/
		RCC->APB1ENR |= TIM2EN;
}

